{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"lodash\"","webpack:///external \"wp.i18n\"","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.element\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.data\"","webpack:///./blocks/_shared/components/collapsible/index.js","webpack:///./blocks/_shared/utils/capitalize.js","webpack:///./blocks/_shared/utils/replaceContent.js","webpack:///./blocks/quiz/controls.js","webpack:///./blocks/_shared/components/post-as-innerblocks/initial-state/index.js","webpack:///./blocks/quiz/edit.js","webpack:///./blocks/quiz/save.js","webpack:///./blocks/quiz/settings.js","webpack:///./blocks/quiz/index.js","webpack:///external \"ReactDOM\"","webpack:///external \"wp.components\""],"names":["module","exports","React","lodash","wp","i18n","blockEditor","element","blocks","data","Collapsible","title","postType","className","children","defaultOpen","useState","open","setState","caretDirection","classNames","Header","as","icon","content","__","toUpperCase","onClick","Transition","visible","animation","duration","capitalize","s","charAt","slice","replaceContent","clientId","postId","replaceInnerBlocks","undefined","type","post","api","models","id","Promise","resolve","fetch","then","parsedBlocks","rawHandler","HTML","content_raw","Controls","withState","loading","posts","setAttributes","useDispatch","useDidMount","collections","status","d","map","push","key","value","text","rendered","Dropdown","placeholder","fluid","search","selection","disabled","options","onChange","e","find","o","lastUpdated","modified_gmt","style","fontFamily","fontSize","Form","onSubmit","Group","Input","name","Button","color","attributes","initialOpen","label","t","ALLOWED_BLOCKS","edit","uuid","uuidv1","allowedBlocks","save","Content","settings","description","category","keywords","supports","html","align","default","registerBlockType","ReactDOM","components"],"mappings":"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","file":"quiz/quiz-block-5bf7314d.js","sourcesContent":["module.exports = React;","module.exports = lodash;","module.exports = wp.i18n;","module.exports = wp.blockEditor;","module.exports = wp.element;","module.exports = wp.blocks;","module.exports = wp.data;","import { useState } from '@wordpress/element';\nimport classNames from 'classnames';\nimport { Header, Transition } from 'semantic-ui-react';\nimport { __ } from '@wordpress/i18n';\n\nconst Collapsible = ({\n    title,\n    postType,\n    className,\n    children,\n    defaultOpen = true,\n}) => {\n    const [open, setState] = useState(defaultOpen);\n\n    const collapseHandler = () => {\n        setState(!open);\n    };\n\n    const caretDirection = open ? 'down' : 'right';\n    // const animation = open ? 'slide down' : 'slide up';\n    const animation = 'fade down';\n\n    return (\n        <div className={classNames(className, 'lmsui-collapsible')}>\n            <div className=\"collapsible-title\">\n                <Header\n                    as=\"h4\"\n                    icon={`caret ${caretDirection}`}\n                    content={__(`${postType.toUpperCase()}:  ${title}`)}\n                    onClick={collapseHandler}\n                />\n            </div>\n            <Transition visible={open} animation={animation} duration={500}>\n                <div className=\"collapsible-content\">{children}</div>\n            </Transition>\n        </div>\n    );\n};\n\nexport default Collapsible;\n","const capitalize = s => {\n\tif (typeof s !== 'string') return ''\n\treturn s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nexport default capitalize;","import { __ } from '@wordpress/i18n';\nimport { rawHandler } from '@wordpress/blocks';\nimport capitalize from './capitalize';\n\nconst replaceContent = (clientId, postId, postType, replaceInnerBlocks) => {\n    if ( null === replaceInnerBlocks || undefined === replaceInnerBlocks ) {\n        return false;\n    }\n    if ( undefined === clientId || undefined === postId || undefined === postType ) {\n        return false;\n    }\n\n    \n    const type = capitalize(postType);\n    const post = new wp.api.models[type]( { id: postId } );\n\n    return new Promise(resolve => {\n        post.fetch().then(post => {\t\t\n            const parsedBlocks = rawHandler({HTML: post.content_raw});\n            replaceInnerBlocks( clientId, parsedBlocks ).then( () => {\n                resolve(post);\n            } );\n        });\n    });\n}\n\nexport default replaceContent;","import { __ } from '@wordpress/i18n';\nimport { InspectorControls } from '@wordpress/block-editor';\nimport { \n\tPanel, \n\tPanelBody, \n\tPanelRow,\n\tTextControl\n} from \"@wordpress/components\";\n\nconst Controls = ({attributes, setAttributes}) => {\n    const panelTitle = 'Quiz Settings';\n    const { title } = attributes;\n\n    return(\n        <InspectorControls>\n            <Panel>\n                <PanelBody title={__(panelTitle)}  initialOpen={ true }>\n                    <PanelRow>\n                        <TextControl\n                            label='Quiz Title'\n                            value={ title }\n                            onChange={ ( t ) => setAttributes( { title: t } ) }\n                        />\n                    </PanelRow>\n                </PanelBody>\n            </Panel>\n        </InspectorControls>\n    )\n}\n\nexport default Controls;","import { __ } from '@wordpress/i18n';\nimport { withState } from '@wordpress/compose';\nimport { Fragment } from '@wordpress/element';\nimport { Dropdown, Form, Header } from 'semantic-ui-react';\nimport { Card, CardBody, CardHeader } from '@wordpress/components';\nimport { useDispatch } from '@wordpress/data';\nimport { useDidMount } from '@daniakash/lifecycle-hooks';\nimport { capitalize, replaceContent } from '@easyteachlms/utils';\n\nconst SearchExisting = withState({\n    loading: true,\n    posts: [],\n})(({ postType, loading, posts, setState, setAttributes, clientId }) => {\n    const type = capitalize(postType);\n    const { replaceInnerBlocks } = useDispatch('core/block-editor');\n\n    const handleChange = (e, d) => {\n        const { value, text } = d.options.find((o) => o.value === d.value);\n\n        replaceContent(clientId, value, postType, replaceInnerBlocks).then(\n            (post) => {\n                setAttributes({\n                    title: text,\n                    id: value,\n                    lastUpdated: post.modified_gmt,\n                });\n            },\n        );\n    };\n\n    const loadPosts = () => {\n        const postsCollection = new wp.api.collections[type]();\n        postsCollection\n            .fetch({ data: { status: ['publish', 'draft'] } })\n            .then((posts) => {\n                // \"d\" for Data\n                const d = [];\n                posts.map((post) => {\n                    d.push({\n                        key: post.id,\n                        value: post.id,\n                        text: post.title.rendered,\n                    });\n                });\n                setState({ posts: d, loading: false });\n            });\n    };\n\n    useDidMount(() => {\n        loadPosts();\n    });\n\n    return (\n        <Fragment>\n            <Header\n                as=\"h3\"\n                icon=\"search\"\n                content={__(`Search for existing ${postType}`)}\n            />\n            <Dropdown\n                placeholder={\n                    loading ? __(`Loading ${postType}...`) : __(`${type}'s`)\n                }\n                fluid\n                search\n                selection\n                loading={loading}\n                disabled={loading}\n                options={posts}\n                onChange={handleChange}\n                style={{\n                    fontFamily:\n                        \"Lato,'Helvetica Neue',Arial,Helvetica,sans-serif\",\n                    fontSize: '14px',\n                }}\n            />\n        </Fragment>\n    );\n});\n\nconst CreateNew = withState({\n    title: '',\n})(({ title, postType, setState, setAttributes }) => {\n    const handleChange = (e, { value }) => {\n        setState({ title: value });\n    };\n    const handleCreation = () => {\n        setAttributes({ title, id: 1 });\n    };\n    return (\n        <Fragment>\n            <Header\n                as=\"h3\"\n                icon=\"add\"\n                content={__(`Start a new ${postType}`)}\n            />\n            <Form onSubmit={handleCreation}>\n                <Form.Group>\n                    <Form.Input\n                        placeholder=\"Title\"\n                        name=\"title\"\n                        value={title}\n                        onChange={handleChange}\n                    />\n                    <Form.Button\n                        color=\"blue\"\n                        icon=\"add\"\n                        content={__(`Create ${postType}`)}\n                    />\n                </Form.Group>\n            </Form>\n        </Fragment>\n    );\n});\n\n// This component will contain a title and a post id. and state and inspector sidebar tools that let you define those manually as well (Should be another component)\n// It will have a title field and a post selector search box that will filter to the post types you pass in as a prop.\n\n// Should only be used when you have no inner block content or some other conditional like that\n\n// Select A Post\n// What the course title is, and what course is associated with it (for courses that should be easy... or not??)\n// What the lesson title is and what the lesson post its associated with...\n// What the topic title is and what the topic post is associated with.\nconst InitialState = ({ postType, setAttributes, className, clientId }) => {\n    return (\n        <div className={className}>\n            <Card size=\"large\">\n                <CardHeader>\n                    <SearchExisting\n                        postType={postType}\n                        clientId={clientId}\n                        setAttributes={setAttributes}\n                    />\n                </CardHeader>\n                <CardBody>\n                    <CreateNew\n                        postType={postType}\n                        setAttributes={setAttributes}\n                    />\n                </CardBody>\n            </Card>\n        </div>\n    );\n};\n\nexport default InitialState;\n","import './edit.scss';\nimport { __ } from '@wordpress/i18n';\nimport { v1 as uuidv1 } from 'uuid';\nimport { withDispatch, useDispatch, useSelect } from '@wordpress/data';\nimport { InnerBlocks } from '@wordpress/block-editor';\n\nimport { Collapsible } from '@easyteachlms/components';\n\nimport Controls from './controls';\n\nconst ALLOWED_BLOCKS = ['easyteachlms/question'];\n\nconst hasBlocks = (clientId) => {\n    console.log(clientId);\n    // We get some information when the block's internal state changes.\n    const { hasInnerBlocks } = useSelect(\n        (select) => 0 < select('core/block-editor').getBlocks(clientId).length,\n        [clientId, name],\n    );\n    return hasInnerBlocks;\n};\n\nconst edit = ({ attributes, className, clientId, setAttributes }) => {\n    const { title, uuid } = attributes;\n\n    if (0 === uuid) {\n        setAttributes({\n            uuid: uuidv1(),\n        });\n    }\n\n    return (\n        <Collapsible className={className} title={title} postType=\"quiz\">\n            <InnerBlocks allowedBlocks={ALLOWED_BLOCKS} />\n            <Controls attributes={attributes} setAttributes={setAttributes} />\n        </Collapsible>\n    );\n};\n\nexport default edit;\n","import { InnerBlocks } from '@wordpress/block-editor';\n\nconst save = ({ attributes, className }) => {\n    return <InnerBlocks.Content />;\n};\n\nexport default save;\n","import { __ } from '@wordpress/i18n';\nimport edit from './edit';\nimport save from './save';\n\nconst settings = [\n    'easyteachlms/quiz',\n    {\n        title: __('Quiz'),\n        description: 'Block Desc.',\n        category: 'education',\n        keywords: [__('Quiz')],\n        supports: {\n            html: false,\n            align: false,\n        },\n        attributes: {\n            title: {\n                type: 'string',\n                default: 'Quiz Title Here',\n            },\n            uuid: {\n                type: 'string',\n                default: 0,\n            },\n        },\n        edit,\n        save,\n    },\n];\n\nexport default settings;\n","import { registerBlockType } from '@wordpress/blocks';\nimport settings from './settings';\n\nregisterBlockType(...settings);\n","module.exports = ReactDOM;","module.exports = wp.components;"],"sourceRoot":""}