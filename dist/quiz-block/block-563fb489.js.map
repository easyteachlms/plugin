{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"lodash\"","webpack:///external \"wp.components\"","webpack:///external \"wp.i18n\"","webpack:///external \"wp.element\"","webpack:///external \"wp.blockEditor\"","webpack:///./blocks/_shared/components/collapsible/index.js","webpack:///./blocks/_shared/utils/capitalize.js","webpack:///./blocks/_shared/utils/replaceContent.js","webpack:///./blocks/quiz/controls.js","webpack:///./blocks/_shared/components/post-as-innerblocks/initial-state/index.js","webpack:///./blocks/quiz/edit.js","webpack:///./blocks/quiz/save.js","webpack:///./blocks/quiz/settings.js","webpack:///./blocks/quiz/index.js","webpack:///external \"wp.data\"","webpack:///external \"wp.blocks\"","webpack:///external \"ReactDOM\""],"names":["module","exports","React","lodash","wp","components","i18n","element","blockEditor","Collapsible","title","postType","className","children","useState","open","setState","caretDirection","classNames","collapsed","Header","as","icon","content","__","toUpperCase","onClick","e","capitalize","s","charAt","slice","replaceContent","clientId","postId","replaceInnerBlocks","undefined","type","post","api","models","id","Promise","resolve","fetch","then","parsedBlocks","rawHandler","HTML","content_raw","Controls","withState","loading","posts","setAttributes","useDispatch","useDidMount","collections","data","status","d","map","push","key","value","text","rendered","Dropdown","placeholder","fluid","search","selection","disabled","options","onChange","find","o","lastUpdated","modified_gmt","style","fontFamily","fontSize","Form","onSubmit","Group","Input","name","Button","color","attributes","initialOpen","label","t","ALLOWED_BLOCKS","edit","allowedBlocks","save","Content","settings","description","category","keywords","supports","html","align","default","registerBlockType","blocks","ReactDOM"],"mappings":"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","file":"quiz-block/block-563fb489.js","sourcesContent":["module.exports = React;","module.exports = lodash;","module.exports = wp.components;","module.exports = wp.i18n;","module.exports = wp.element;","module.exports = wp.blockEditor;","import { useState } from '@wordpress/element';\nimport classNames from 'classnames';\nimport { Header } from 'semantic-ui-react';\nimport { __ } from '@wordpress/i18n';\nimport './style.scss';\n\nconst Collapsible = ({ title, postType, className, children }) => {\n\tconst [ open, setState ] = useState(true);\n\t\n\tconst collapseHandler = (e) => {\n\t\tsetState(!open);\n\t}\n\t\n\tlet caretDirection = open ? 'down' : 'right';\n\n\treturn(\n        <div className={classNames(className, { collapsed: !open })}>\n            <div className=\"collapsible-title\">\n                <Header as='h4' icon={\"caret \" + caretDirection} content={__( postType.toUpperCase() + ':  ' + title)} onClick={collapseHandler} />\n            </div>\n            <div className=\"collapsible-content\">\n                {children}\n            </div>\n        </div>\n    )\n}\n\nexport default Collapsible;","const capitalize = s => {\n\tif (typeof s !== 'string') return ''\n\treturn s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nexport default capitalize;","import { __ } from '@wordpress/i18n';\nimport { rawHandler } from '@wordpress/blocks';\nimport capitalize from './capitalize';\n\nconst replaceContent = (clientId, postId, postType, replaceInnerBlocks) => {\n    if ( null === replaceInnerBlocks || undefined === replaceInnerBlocks ) {\n        return false;\n    }\n    if ( undefined === clientId || undefined === postId || undefined === postType ) {\n        return false;\n    }\n\n    \n    const type = capitalize(postType);\n    const post = new wp.api.models[type]( { id: postId } );\n\n    return new Promise(resolve => {\n        post.fetch().then(post => {\t\t\n            const parsedBlocks = rawHandler({HTML: post.content_raw});\n            replaceInnerBlocks( clientId, parsedBlocks ).then( () => {\n                resolve(post);\n            } );\n        });\n    });\n}\n\nexport default replaceContent;","import { __ } from '@wordpress/i18n';\nimport { InspectorControls } from '@wordpress/block-editor';\nimport { \n\tPanel, \n\tPanelBody, \n\tPanelRow,\n\tTextControl\n} from \"@wordpress/components\";\n\nconst Controls = ({attributes, setAttributes}) => {\n    const panelTitle = 'Quiz Settings';\n    const { title } = attributes;\n\n    return(\n        <InspectorControls>\n            <Panel>\n                <PanelBody title={__(panelTitle)}  initialOpen={ true }>\n                    <PanelRow>\n                        <TextControl\n                            label='Quiz Title'\n                            value={ title }\n                            onChange={ ( t ) => setAttributes( { title: t } ) }\n                        />\n                    </PanelRow>\n                </PanelBody>\n            </Panel>\n        </InspectorControls>\n    )\n}\n\nexport default Controls;","import { __ } from '@wordpress/i18n';\nimport { withState } from '@wordpress/compose';\nimport { Fragment } from '@wordpress/element';\nimport { Dropdown, Form, Header } from 'semantic-ui-react';\nimport { Card, CardBody, CardDivider, CardHeader } from '@wordpress/components';\nimport { useDispatch } from '@wordpress/data';\nimport { useDidMount } from '@daniakash/lifecycle-hooks';\nimport { capitalize, replaceContent } from '@easyteachlms/utils';\n\nconst SearchExisting = withState({\n    loading: true,\n    posts: [],\n})(({ postType, loading, posts, setState, setAttributes, clientId }) => {\n    const type = capitalize(postType);\n    const { replaceInnerBlocks } = useDispatch('core/block-editor');\n\n    const handleChange = (e, d) => {\n        const { value, text } = d.options.find((o) => o.value === d.value);\n\n        replaceContent(clientId, value, postType, replaceInnerBlocks).then(\n            (post) => {\n                setAttributes({\n                    title: text,\n                    id: value,\n                    lastUpdated: post.modified_gmt,\n                });\n            },);\n    };\n\n    const loadPosts = () => {\n        const postsCollection = new wp.api.collections[type]();\n        postsCollection\n            .fetch({ data: { status: ['publish', 'draft'] } })\n            .then((posts) => {\n                // \"d\" for Data\n                const d = [];\n                posts.map((post) => {\n                    d.push({\n                        key: post.id,\n                        value: post.id,\n                        text: post.title.rendered,\n                    });\n                });\n                setState({ posts: d, loading: false });\n            });\n    };\n\n    useDidMount(() => {\n        loadPosts();\n    });\n\n    return (\n        <Fragment>\n            <Header\n                as=\"h3\"\n                icon=\"search\"\n                content={__(`Search for existing ${postType}`)}\n            />\n            <Dropdown\n                placeholder={\n                    loading ? __(`Loading ${postType}...`) : __(`${type}'s`)\n                }\n                fluid\n                search\n                selection\n                loading={loading}\n                disabled={loading}\n                options={posts}\n                onChange={handleChange}\n                style={{\n                    fontFamily:\n                        \"Lato,'Helvetica Neue',Arial,Helvetica,sans-serif\",\n                    fontSize: '14px',\n                }}\n            />\n        </Fragment>\n    );\n});\n\nconst CreateNew = withState({\n    title: '',\n})(({ title, postType, setState, setAttributes }) => {\n    const handleChange = (e, { name, value }) => {\n        setState({ title: value });\n    };\n    const handleCreation = () => {\n        setAttributes({ title, id: 1 });\n    };\n    return (\n        <Fragment>\n            <Header\n                as=\"h3\"\n                icon=\"add\"\n                content={__(`Start a new ${postType}`)}\n            />\n            <Form onSubmit={handleCreation}>\n                <Form.Group>\n                    <Form.Input\n                        placeholder=\"Title\"\n                        name=\"title\"\n                        value={title}\n                        onChange={handleChange}\n                    />\n                    <Form.Button\n                        color=\"blue\"\n                        icon=\"add\"\n                        content={__(`Create ${postType}`)}\n                    />\n                </Form.Group>\n            </Form>\n        </Fragment>\n    );\n});\n\n// This component will contain a title and a post id. and state and inspector sidebar tools that let you define those manually as well (Should be another component)\n// It will have a title field and a post selector search box that will filter to the post types you pass in as a prop.\n\n// Should only be used when you have no inner block content or some other conditional like that\n\nconst InitialState = ({ postType, setAttributes, className, clientId }) => {\n    // Select A Post\n    // What the course title is, and what course is associated with it (for courses that should be easy... or not??)\n    // What the lesson title is and what the lesson post its associated with...\n    // What the topic title is and what the topic post is associated with.\n    return (\n        <div className={className}>\n            <Card size=\"large\">\n                <CardHeader>\n                    <SearchExisting\n                        postType={postType}\n                        clientId={clientId}\n                        setAttributes={setAttributes}\n                    />\n                </CardHeader>\n                {/* <CardDivider /> */}\n                <CardBody>\n                    <CreateNew\n                        postType={postType}\n                        setAttributes={setAttributes}\n                    />\n                </CardBody>\n            </Card>\n        </div>\n    );\n};\n\nexport default InitialState;\n","import './edit.scss';\nimport { __ } from '@wordpress/i18n';\nimport { withDispatch, useDispatch, useSelect } from '@wordpress/data';\nimport { InnerBlocks } from '@wordpress/block-editor';\n\nimport { Collapsible } from '@easyteachlms/components';\n\nimport Controls from './controls';\n\nconst ALLOWED_BLOCKS = ['easyteachlms/question'];\n\nconst hasBlocks = (clientId) => {\n\tconsole.log(clientId);\n\t// We get some information when the block's internal state changes.\n\tconst { hasInnerBlocks } = useSelect(\n\t\tselect => select( 'core/block-editor' ).getBlocks( clientId ).length > 0,\n\t\t[ clientId, name ]\n\t);\n\treturn hasInnerBlocks;\n}\n\nconst edit = ({ attributes, className, clientId, setAttributes }) => {\n\tconst { title } = attributes;\n\n\treturn(\n        <Collapsible className={className} title={title} postType=\"quiz\">\n            <InnerBlocks allowedBlocks={ALLOWED_BLOCKS}/>\n\t\t\t<Controls attributes={attributes} setAttributes={setAttributes}/>\n        </Collapsible>\n    )\n}\n\nexport default edit;","import { InnerBlocks } from '@wordpress/block-editor';\n\nconst save = ({attributes, className}) => {\n    return <div className={className}><InnerBlocks.Content/></div>\n}\n\nexport default save;","\nimport { __ } from '@wordpress/i18n';\nimport edit from './edit';\nimport save from './save';\n\nconst settings = [\n    'easyteachlms/quiz',\n    {\n        title: __('Quiz'), \n        description: 'Block Desc.',\n        category: 'education',\n        keywords: [\n            __( 'Quiz' ),\n        ],\n        supports: {\n            html: false, \n            align: false,\n        },\n        attributes: {\n            title: {\n                type: 'string',\n                default: 'Quiz Title Here',\n            },\n        },\n        edit,\n        save,\n    }\n];\n\nexport default settings;","import { registerBlockType } from '@wordpress/blocks';\nimport settings from './settings';\n\nregisterBlockType(...settings);\n","module.exports = wp.data;","module.exports = wp.blocks;","module.exports = ReactDOM;"],"sourceRoot":""}