{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"lodash\"","webpack:///external \"wp.i18n\"","webpack:///external \"wp.components\"","webpack:///external \"wp.element\"","webpack:///./blocks/_shared/components/collapsible/index.js","webpack:///./blocks/_shared/utils/capitalize.js","webpack:///./blocks/_shared/utils/replaceContent.js","webpack:///./blocks/_shared/components/post-as-innerblocks/initial-state/index.js","webpack:///./blocks/_shared/components/post-as-innerblocks/controls/index.js","webpack:///./blocks/_shared/components/post-as-innerblocks/index.js","webpack:///./blocks/topic/edit.js","webpack:///./blocks/topic/save.js","webpack:///./blocks/topic/settings.js","webpack:///./blocks/topic/index.js","webpack:///external \"wp.blocks\"","webpack:///external \"wp.data\"","webpack:///external \"ReactDOM\"","webpack:///external \"wp.blockEditor\""],"names":["module","exports","React","lodash","wp","i18n","components","element","Collapsible","title","postType","className","children","defaultOpen","useState","open","setState","caretDirection","classNames","Header","as","icon","content","__","toUpperCase","onClick","Transition","visible","animation","duration","capitalize","s","charAt","slice","replaceContent","clientId","postId","replaceInnerBlocks","undefined","type","post","api","models","id","Promise","resolve","fetch","then","parsedBlocks","rawHandler","HTML","content_raw","SearchExisting","withState","loading","posts","setAttributes","useDispatch","useDidMount","collections","data","status","d","map","push","key","value","text","rendered","Dropdown","placeholder","fluid","search","selection","disabled","options","onChange","e","find","o","lastUpdated","modified_gmt","style","fontFamily","fontSize","CreateNew","Form","onSubmit","Group","Input","name","Button","color","InitialState","size","Controls","currentBlock","isSelected","useSelect","select","getBlock","updated","setFlag","hasInnerBlocks","getBlocks","length","UpdateContentButton","isSmall","isPrimary","SaveAsNewButton","saveAsPost","attributes","innerBlocks","getSaveContent","save","isSecondary","checkForUpdates","console","info","log","setInterval","panelTitle","display","alignItems","marginRight","initialOpen","label","isLink","PostAsInnerBlocks","allowedBlocks","Content","edit","uuid","uuidv1","data-title","data-uuid","settings","description","category","keywords","supports","html","align","default","parent","registerBlockType","blocks","ReactDOM","blockEditor"],"mappings":"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","file":"topic-block/block-fb1e21ec.js","sourcesContent":["module.exports = React;","module.exports = lodash;","module.exports = wp.i18n;","module.exports = wp.components;","module.exports = wp.element;","import { useState } from '@wordpress/element';\nimport classNames from 'classnames';\nimport { Header, Transition } from 'semantic-ui-react';\nimport { __ } from '@wordpress/i18n';\n\nconst Collapsible = ({\n    title,\n    postType,\n    className,\n    children,\n    defaultOpen = true,\n}) => {\n    const [open, setState] = useState(defaultOpen);\n\n    const collapseHandler = () => {\n        setState(!open);\n    };\n\n    const caretDirection = open ? 'down' : 'right';\n    // const animation = open ? 'slide down' : 'slide up';\n    const animation = 'fade down';\n\n    return (\n        <div className={classNames(className, 'lmsui-collapsible')}>\n            <div className=\"collapsible-title\">\n                <Header\n                    as=\"h4\"\n                    icon={`caret ${caretDirection}`}\n                    content={__(`${postType.toUpperCase()}:  ${title}`)}\n                    onClick={collapseHandler}\n                />\n            </div>\n            <Transition visible={open} animation={animation} duration={500}>\n                <div className=\"collapsible-content\">{children}</div>\n            </Transition>\n        </div>\n    );\n};\n\nexport default Collapsible;\n","const capitalize = s => {\n\tif (typeof s !== 'string') return ''\n\treturn s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nexport default capitalize;","import { __ } from '@wordpress/i18n';\nimport { rawHandler } from '@wordpress/blocks';\nimport capitalize from './capitalize';\n\nconst replaceContent = (clientId, postId, postType, replaceInnerBlocks) => {\n    if ( null === replaceInnerBlocks || undefined === replaceInnerBlocks ) {\n        return false;\n    }\n    if ( undefined === clientId || undefined === postId || undefined === postType ) {\n        return false;\n    }\n\n    \n    const type = capitalize(postType);\n    const post = new wp.api.models[type]( { id: postId } );\n\n    return new Promise(resolve => {\n        post.fetch().then(post => {\t\t\n            const parsedBlocks = rawHandler({HTML: post.content_raw});\n            replaceInnerBlocks( clientId, parsedBlocks ).then( () => {\n                resolve(post);\n            } );\n        });\n    });\n}\n\nexport default replaceContent;","import { __ } from '@wordpress/i18n';\nimport { withState } from '@wordpress/compose';\nimport { Fragment } from '@wordpress/element';\nimport { Dropdown, Form, Header } from 'semantic-ui-react';\nimport { Card, CardBody, CardHeader } from '@wordpress/components';\nimport { useDispatch } from '@wordpress/data';\nimport { useDidMount } from '@daniakash/lifecycle-hooks';\nimport { capitalize, replaceContent } from '@easyteachlms/utils';\n\nconst SearchExisting = withState({\n    loading: true,\n    posts: [],\n})(({ postType, loading, posts, setState, setAttributes, clientId }) => {\n    const type = capitalize(postType);\n    const { replaceInnerBlocks } = useDispatch('core/block-editor');\n\n    const handleChange = (e, d) => {\n        const { value, text } = d.options.find((o) => o.value === d.value);\n\n        replaceContent(clientId, value, postType, replaceInnerBlocks).then(\n            (post) => {\n                setAttributes({\n                    title: text,\n                    id: value,\n                    lastUpdated: post.modified_gmt,\n                });\n            },\n        );\n    };\n\n    const loadPosts = () => {\n        const postsCollection = new wp.api.collections[type]();\n        postsCollection\n            .fetch({ data: { status: ['publish', 'draft'] } })\n            .then((posts) => {\n                // \"d\" for Data\n                const d = [];\n                posts.map((post) => {\n                    d.push({\n                        key: post.id,\n                        value: post.id,\n                        text: post.title.rendered,\n                    });\n                });\n                setState({ posts: d, loading: false });\n            });\n    };\n\n    useDidMount(() => {\n        loadPosts();\n    });\n\n    return (\n        <Fragment>\n            <Header\n                as=\"h3\"\n                icon=\"search\"\n                content={__(`Search for existing ${postType}`)}\n            />\n            <Dropdown\n                placeholder={\n                    loading ? __(`Loading ${postType}...`) : __(`${type}'s`)\n                }\n                fluid\n                search\n                selection\n                loading={loading}\n                disabled={loading}\n                options={posts}\n                onChange={handleChange}\n                style={{\n                    fontFamily:\n                        \"Lato,'Helvetica Neue',Arial,Helvetica,sans-serif\",\n                    fontSize: '14px',\n                }}\n            />\n        </Fragment>\n    );\n});\n\nconst CreateNew = withState({\n    title: '',\n})(({ title, postType, setState, setAttributes }) => {\n    const handleChange = (e, { value }) => {\n        setState({ title: value });\n    };\n    const handleCreation = () => {\n        setAttributes({ title, id: 1 });\n    };\n    return (\n        <Fragment>\n            <Header\n                as=\"h3\"\n                icon=\"add\"\n                content={__(`Start a new ${postType}`)}\n            />\n            <Form onSubmit={handleCreation}>\n                <Form.Group>\n                    <Form.Input\n                        placeholder=\"Title\"\n                        name=\"title\"\n                        value={title}\n                        onChange={handleChange}\n                    />\n                    <Form.Button\n                        color=\"blue\"\n                        icon=\"add\"\n                        content={__(`Create ${postType}`)}\n                    />\n                </Form.Group>\n            </Form>\n        </Fragment>\n    );\n});\n\n// This component will contain a title and a post id. and state and inspector sidebar tools that let you define those manually as well (Should be another component)\n// It will have a title field and a post selector search box that will filter to the post types you pass in as a prop.\n\n// Should only be used when you have no inner block content or some other conditional like that\n\n// Select A Post\n// What the course title is, and what course is associated with it (for courses that should be easy... or not??)\n// What the lesson title is and what the lesson post its associated with...\n// What the topic title is and what the topic post is associated with.\nconst InitialState = ({ postType, setAttributes, className, clientId }) => {\n    return (\n        <div className={className}>\n            <Card size=\"large\">\n                <CardHeader>\n                    <SearchExisting\n                        postType={postType}\n                        clientId={clientId}\n                        setAttributes={setAttributes}\n                    />\n                </CardHeader>\n                <CardBody>\n                    <CreateNew\n                        postType={postType}\n                        setAttributes={setAttributes}\n                    />\n                </CardBody>\n            </Card>\n        </div>\n    );\n};\n\nexport default InitialState;\n","import { __ } from '@wordpress/i18n';\nimport { useDidMount } from '@daniakash/lifecycle-hooks';\nimport { Fragment, useState } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { getSaveContent } from '@wordpress/blocks';\nimport { InspectorControls } from '@wordpress/block-editor';\nimport {\n    Button,\n    Panel,\n    PanelBody,\n    PanelRow,\n    TextControl,\n    Dashicon,\n} from '@wordpress/components';\nimport { replaceContent, capitalize } from '@easyteachlms/utils';\n\nconst Controls = ({\n    id,\n    postType,\n    title,\n    lastUpdated,\n    clientId,\n    setAttributes = false,\n    isSelected,\n}) => {\n    const currentBlock = useSelect((select) => {\n        return select('core/block-editor').getBlock(clientId);\n    }, []);\n\n    const [updated, setFlag] = useState(false);\n\n    const type = capitalize(postType);\n\n    const { hasInnerBlocks } = useSelect(\n        (select) => {\n            return {\n                hasInnerBlocks:\n                    0 < select('core/block-editor').getBlocks(clientId).length,\n            };\n        },\n        [clientId],\n    );\n\n    const { replaceInnerBlocks } = useDispatch('core/block-editor');\n\n    const UpdateContentButton = ({ isSmall = false }) => {\n        const onClick = () => {\n            replaceContent(clientId, id, postType, replaceInnerBlocks).then(\n                (post) => {\n                    setAttributes({ lastUpdated: post.modified_gmt });\n                    setFlag(false);\n                },\n            );\n        };\n        return (\n            <Button isSmall={isSmall} isPrimary onClick={() => onClick()}>\n                {__('Update Content')}\n            </Button>\n        );\n    };\n\n    const SaveAsNewButton = ({ isSmall = false }) => {\n        if (false === hasInnerBlocks) {\n            return <Fragment />;\n        }\n\n        const getBlockContent = () => {\n            const { attributes, innerBlocks } = currentBlock;\n            return getSaveContent(\n                'sethrubenstein/ghost-block',\n                attributes,\n                innerBlocks,\n            );\n        };\n\n        const saveAsPost = () => {\n            const content = getBlockContent();\n\n            const post = new wp.api.models[type]({ title, content });\n\n            post.save().then((post) => {\n                setAttributes({\n                    id: post.id,\n                    lastUpdated: post.modified_gmt,\n                });\n            });\n        };\n        return (\n            <Button isSmall={isSmall} isSecondary onClick={() => saveAsPost()}>\n                {__(`Save As New ${type}`)}\n            </Button>\n        );\n    };\n\n    const checkForUpdates = () => {\n        if (1 === id) {\n            return;\n        }\n        console.info('Watching for updates...');\n        const post = new wp.api.models[type]({ id });\n        post.fetch().then((post) => {\n            console.log(post);\n            if (lastUpdated !== post.modified_gmt) {\n                setFlag(true);\n            }\n        });\n    };\n\n    /** Check for post updates */\n    useDidMount(() => {\n        checkForUpdates();\n        setInterval(checkForUpdates, 30000);\n    });\n\n    const panelTitle = `${type} Settings`;\n\n    return (\n        <Fragment>\n            {true === updated && (\n                <div\n                    style={{\n                        fontSize: '13px',\n                        fontFamily: 'sans-serif',\n                        color: 'gray',\n                        display: 'flex',\n                        alignItems: 'center',\n                    }}\n                >\n                    <Dashicon icon=\"update\" style={{ marginRight: '11px' }} />\n                    This {type} has updated content.\n                </div>\n            )}\n            <div style={{ display: 'flex' }}>\n                {true === updated && (\n                    <div>\n                        <UpdateContentButton isSmall />\n                    </div>\n                )}\n                <div>\n                    <SaveAsNewButton isSmall />\n                </div>\n            </div>\n            <InspectorControls>\n                <Panel>\n                    <PanelBody title={__(panelTitle)} initialOpen>\n                        <PanelRow>\n                            <TextControl\n                                label=\"Title\"\n                                value={title}\n                                onChange={(title) => setAttributes({ title })}\n                            />\n                        </PanelRow>\n                        <PanelRow>\n                            <TextControl label=\"ID\" value={id} disabled />\n                        </PanelRow>\n                        <PanelRow>\n                            <TextControl\n                                label=\"Post Type\"\n                                value={type}\n                                disabled\n                            />\n                        </PanelRow>\n                        {true === updated && (\n                            <PanelRow>\n                                <UpdateContentButton />\n                            </PanelRow>\n                        )}\n                        <PanelRow>\n                            <SaveAsNewButton />\n                        </PanelRow>\n                        <PanelRow>\n                            <Button isLink>{__('Edit In New Window')}</Button>\n                        </PanelRow>\n                    </PanelBody>\n                </Panel>\n            </InspectorControls>\n        </Fragment>\n    );\n};\n\nexport default Controls;\n","// HOC that maintains a connection to a external post\n\nimport { __ } from '@wordpress/i18n';\nimport { Fragment } from '@wordpress/element';\nimport { InnerBlocks } from '@wordpress/block-editor';\n\nimport InitialState from './initial-state';\nimport Controls from './controls';\n\n// if id === 0 then display the block initial state\n// if id === 1 then display normal but offer an option to save as post\n// if id is something else then actually check if the post exists and offer the updates and all that.\n\nconst PostAsInnerBlocks = ({\n    id,\n    postType,\n    title,\n    lastUpdated,\n    clientId,\n    isSelected = false,\n    setAttributes = false,\n    className = '',\n    allowedBlocks = null,\n}) => {\n    if (false === setAttributes) {\n        return <InnerBlocks.Content />;\n    }\n\n    if (0 === id) {\n        return (\n            <InitialState\n                postType={postType}\n                setAttributes={setAttributes}\n                className={className}\n                clientId={clientId}\n            />\n        );\n    }\n\n    return (\n        <Fragment>\n            {false !== setAttributes && (\n                <Fragment>\n                    <InnerBlocks allowedBlocks={allowedBlocks} />\n                    <Controls\n                        id={id}\n                        postType={postType}\n                        title={title}\n                        lastUpdated={lastUpdated}\n                        clientId={clientId}\n                        setAttributes={setAttributes}\n                        isSelected={isSelected}\n                    />\n                </Fragment>\n            )}\n        </Fragment>\n    );\n};\n\nexport default PostAsInnerBlocks;\n","import { __ } from '@wordpress/i18n';\nimport { v1 as uuidv1 } from 'uuid';\nimport { Collapsible, PostAsInnerBlocks } from '@easyteachlms/components';\n\nconst edit = ({\n    attributes,\n    className,\n    clientId,\n    setAttributes,\n    isSelected,\n}) => {\n    const { title, lastUpdated, id, uuid } = attributes;\n\n    if (0 === uuid) {\n        setAttributes({\n            uuid: uuidv1(),\n        });\n    }\n\n    if (0 !== id && '' !== title) {\n        return (\n            <Collapsible className={className} title={title} postType=\"topic\">\n                {/** Need to create a new block called topic content, it would use post as innerblocks and we would have a template on the topic block so when you insert it also inserts a topic content block internally. we could then easily use this to import and export content as we see fit. */}\n                <PostAsInnerBlocks\n                    id={id}\n                    postType=\"topic\"\n                    title={title}\n                    lastUpdated={lastUpdated}\n                    setAttributes={setAttributes}\n                    clientId={clientId}\n                    isSelected={isSelected}\n                />\n            </Collapsible>\n        );\n    }\n\n    return (\n        <PostAsInnerBlocks\n            id={id}\n            postType=\"topic\"\n            title={title}\n            lastUpdated={lastUpdated}\n            setAttributes={setAttributes}\n            clientId={clientId}\n            isSelected={isSelected}\n        />\n    );\n};\n\nexport default edit;\n","import { __ } from '@wordpress/i18n';\nimport { PostAsInnerBlocks } from '@easyteachlms/components';\n\nconst save = ({ attributes, className, clientId }) => {\n    const { title, lastUpdated, id, uuid } = attributes;\n    return (\n        <div className={className} data-title={title} data-uuid={uuid}>\n            <PostAsInnerBlocks\n                id={id}\n                postType=\"topic\"\n                title={title}\n                lastUpdated={lastUpdated}\n                setAttributes={false}\n                clientId={clientId}\n            />\n        </div>\n    );\n};\n\nexport default save;\n","import { __ } from '@wordpress/i18n';\nimport edit from './edit';\nimport save from './save';\n\nconst settings = [\n    'easyteachlms/topic',\n    {\n        title: __('Topic'),\n        description: 'Block Desc.',\n        category: 'education',\n        keywords: [__('Topic')],\n        supports: {\n            html: false,\n            align: false,\n        },\n        attributes: {\n            id: {\n                type: 'integer',\n                default: 0,\n            },\n            lastUpdated: {\n                type: 'string',\n                default: 0,\n            },\n            title: {\n                type: 'string',\n                default: '',\n            },\n            uuid: {\n                type: 'string',\n                default: 0, // At block init a UUID will be generated based on timestamp\n            },\n        },\n        parent: ['easyteachlms/lesson'],\n        edit,\n        save,\n    },\n];\n\nexport default settings;\n","import { registerBlockType } from '@wordpress/blocks';\nimport settings from './settings';\nimport './topic.scss';\n\nregisterBlockType(...settings);\n","module.exports = wp.blocks;","module.exports = wp.data;","module.exports = ReactDOM;","module.exports = wp.blockEditor;"],"sourceRoot":""}