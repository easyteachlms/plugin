{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"wp.components\"","webpack:///external \"wp.element\"","webpack:///external \"wp.i18n\"","webpack:///./blocks/_shared/components/collapsible/index.js","webpack:///./blocks/_shared/components/post-as-innerblocks/initial-state/index.js","webpack:///./blocks/_shared/components/post-as-innerblocks/index.js","webpack:///./blocks/topic/edit.js","webpack:///./blocks/topic/save.js","webpack:///./blocks/topic/settings.js","webpack:///./blocks/topic/index.js","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.data\"","webpack:///external \"lodash\"","webpack:///external \"ReactDOM\"","webpack:///external \"wp.blocks\""],"names":["module","exports","React","wp","components","element","i18n","Collapsible","title","postType","className","children","useState","open","setState","caretDirection","classNames","collapsed","Header","as","icon","content","__","toUpperCase","onClick","e","SearchExisting","setAttributes","Dropdown","placeholder","fluid","search","selection","options","key","value","text","onChange","v","console","log","style","fontFamily","fontSize","CreateNew","withState","Form","onSubmit","id","Group","Input","name","Button","color","InitialState","Segment","textAlign","Divider","horizontal","PostAsInnerBlocks","lastUpdated","allowedBlocks","useDidMount","Toolbar","isSecondary","type","s","charAt","slice","api","models","save","then","post","modified_gmt","saveAsPost","Content","edit","attributes","clientId","useSelect","select","blockType","getBlockType","hasInnerBlocks","getBlocks","length","useDispatch","replaceInnerBlocks","size","disabled","settings","description","category","keywords","supports","html","align","default","registerBlockType","blockEditor","data","lodash","ReactDOM","blocks"],"mappings":"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","file":"topic-block/block-81f9639f.js","sourcesContent":["module.exports = React;","module.exports = wp.components;","module.exports = wp.element;","module.exports = wp.i18n;","import { useState } from '@wordpress/element';\nimport classNames from 'classnames';\nimport { Header } from 'semantic-ui-react';\nimport { __ } from '@wordpress/i18n';\n\nconst Collapsible = ({ title, postType, className, children }) => {\n\tconst [ open, setState ] = useState(true);\n\t\n\tconst collapseHandler = (e) => {\n\t\tsetState(!open);\n\t}\n\t\n\tlet caretDirection = open ? 'down' : 'right';\n\n\treturn(\n        <div className={classNames(className, { collapsed: !open })}>\n            <div className=\"collapsible-title\">\n                <Header as='h4' icon={\"caret \" + caretDirection} content={__( postType.toUpperCase() + ' ' + title)} onClick={collapseHandler} />\n            </div>\n            <div className=\"collapsible-content\">\n                {children}\n            </div>\n        </div>\n    )\n}\n\nexport default Collapsible;","import { withState } from '@wordpress/compose';\nimport { Fragment } from '@wordpress/element';\nimport { Dropdown, Form, Divider, Segment, Header } from 'semantic-ui-react';\nimport { __ } from '@wordpress/i18n';\n\nconst SearchExisting = ({postType, setAttributes}) => {\n    // We need a promise that will set state and say loaded and also load the options from post values\n    const options = [\n        { key: 'a', value: 'a', text: 'Post A' },\n        { key: 'b', value: 'b', text: 'Post B' },\n        { key: 'c', value: 'c', text: 'Post C' },\n        { key: 'd', value: 'd', text: 'Post D' },\n        { key: 'e', value: 'e', text: 'Post E' },\n        { key: 'f', value: 'f', text: 'Post F' },\n        { key: 'g', value: 'g', text: 'Post G' },\n        { key: 'h', value: 'h', text: 'Post H' },\n        { key: 'i', value: 'i', text: 'Post I' },\n        { key: 'j', value: 'j', text: 'Post J' },\n        { key: 'l', value: 'l', text: 'Post L' },\n        { key: 'k', value: 'k', text: 'Post K' },\n    ];\n \n    return (\n        <Fragment>\n            <Header as='h3' icon='search' content={__('Search for existing ' + postType)} />\n            <Dropdown\n                placeholder={__('Select ' + postType)}\n                fluid\n                search\n                selection\n                options={options}\n                onChange={v => console.log(v)}\n                style={{\n                    fontFamily:\"Lato,'Helvetica Neue',Arial,Helvetica,sans-serif\",\n                    fontSize: '14px',\n                }}\n            />\n        </Fragment>\n    );\n}\n\nconst CreateNew = withState( {\n    title: '',\n} )( ( { title, postType, setState, setAttributes } ) => {\n    const handleChange = (e, { name, value }) => {\n        setState( { title: value } );\n    }\n    const handleCreation = () => {\n        // let post = new wp.api.models[capitalize(postType)]( { title } );\n        // post.save();\n        // setAttributes( { title, id: post.id } );\n        setAttributes({ title, id: 1 });\n        // And also using the wp.api go create a lesson with this title, return the ID and then set the attribute as the ID.\n    }\n    return (\n        <Fragment>\n            <Header as='h3' icon='add' content={__('Start a new ' + postType)} />\n            <Form onSubmit={handleCreation}>\n              <Form.Group>\n                <Form.Input\n                  placeholder='Title'\n                  name='title'\n                  value={title}\n                  onChange={handleChange}\n                />\n                <Form.Button color=\"teal\" icon=\"add\" content={__('Create ' + postType)} />\n              </Form.Group>\n            </Form>\n        </Fragment>\n    );\n} );\n\n// This component will contain a title and a post id. and state and inspector sidebar tools that let you define those manually as well (Should be another component)\n// It will have a title field and a post selector search box that will filter to the post types you pass in as a prop.\n\n// Should only be used when you have no inner block content or some other conditional like that\n\nconst InitialState = ({postType, setAttributes, className}) => {\n    // Select A Post\n    // What the course title is, and what course is associated with it (for courses that should be easy... or not??)\n    // What the lesson title is and what the lesson post its associated with...\n    // What the topic title is and what the topic post is associated with.\n    return(\n        <div className={className}>\n            <Segment textAlign='center'>\n                <SearchExisting postType={postType}/>\n                <Divider horizontal>\n                    <span  style={{\n                        fontFamily:\"Lato,'Helvetica Neue',Arial,Helvetica,sans-serif\",\n                        fontSize: '14px',\n                    }}>Or</span>\n                </Divider>\n                <CreateNew postType={postType} setAttributes={setAttributes}/>\n            </Segment>\n        </div>\n    );\n}\n\nexport default InitialState;","// HOC that maintains a connection to a external post\nimport { Fragment } from '@wordpress/element';\nimport { Button } from \"@wordpress/components\";\nimport { withDispatch, useDispatch, useSelect } from '@wordpress/data';\n\nimport {\n\tuseState,\n\tuseConstructor,\n\tuseDidMount,\n  } from \"@daniakash/lifecycle-hooks\";\n\nimport InitialState from './initial-state';\n\nimport {\n\tInspectorControls,\n\tInnerBlocks,\n\tBlockControls,\n} from '@wordpress/block-editor';\n\n\t// Creating a topic for the first time:\n\t// Give it a title.\n\t// Add all your innerblocks.\n\t// Offer a save button, click save whenever you want, we're not going to force it at start. Once you click save that block will go save itself AND set a lastUpdaed attribute from the saved post.\n\n\t// Updating Mechanism once a topic is created for the first time:\n\t// We can set a param here when the topic was added into the content a unix timestamp. On component mount in the edit function we should ping the topic for the last updated timestamp and if its more recent then we should offer the option to update the topic to latest content or lave as is.\n\t// There will be no hard linking. When we do the update we'll need to link into the block editor actual code editing ability and see if we can update the raw html of the block\n\t// When isSelected is true on the topic and isnt a brand new topic\n\t// 1. Check attributes.lastUpdated === topicPost.lastUpdated (made up variable we'll need to get that info). If so stop, otherwise proceed.\n\t// 2. Prompt user new content is available for this Topic would you like to load it or leave alone.\n\t// 3. If they select load it then go get the topicPosts postContent as a raw html string, store it as a temp variable.\n\t// 4. Use block editor parser https://developer.wordpress.org/block-editor/packages/packages-block-serialization-default-parser/ to transfor that html string into a list of innerBlock essentially\n\t// 5. Use block editor replaceInnerBLocks https://developer.wordpress.org/block-editor/data/data-core-block-editor/#replaceInnerBlocks to replace the inner blocks of this block with the innerblocks generated from step 4. \n\t// 6. Update attributes.lastUpdated with the topicPost.lastUpdated value so now we signal they are in sync.\n\t/// Possibly??? An option to instead of update, create new (fork) the topic/lesson\n\nconst checkPostForUpdates = (id, postType, lastUpdated) => {\n\t// Go hit backbone api and get post given id\n\t// Get post last updated\n\t// Is lastUpdated here the same as last update, then dont worry about it.\n}\n\n// OPTION 1: Update inner blocks with the contents \nconst updateInnerBlocks = (newInnerBlocks) => {\n\tconst { replaceInnerBlocks } = useDispatch( 'core/block-editor' );\n}\n\n// OPTION 3: Do nothing.\n\n\n// if id === 0 then display the block initial state\n// if id === 1 then display normal but offer an option to save as post\n// if id is something else then actually check if the post exists and offer the updates and all that. \n\nconst PostAsInnerBlocks = ({id, postType, title, lastUpdated, setAttributes = false, className = '', allowedBlocks = null}) => {\n    // Select A Post\n    // What the course title is, and what course is associated with it (for courses that should be easy... or not??)\n    // What the lesson title is and what the lesson post its associated with...\n\t// What the topic title is and what the topic post is associated with.\n\n\tuseDidMount(() => {\n\t\tconsole.log('Hi');\n\t\tconsole.log(id);\n\t});\n\n\t// OPTION 2: Save what you have as a brand new post, break existing links, put new links and more importantly take the current innerblocks parse them back out and send them to a posts content.\n\tconst saveAsPost = (type) => {\n\t\tconst capitalize = (s) => {\n\t\t\tif (typeof s !== 'string') return ''\n\t\t\treturn s.charAt(0).toUpperCase() + s.slice(1)\n\t\t}\n\t\t\n\t\tlet postType = capitalize(type);\n\t\t\n\t\tlet content = \"Testing. Hello World!\";\n\n\t\tlet post = new wp.api.models[postType]( { title, content } );\n\t\tpost.save().then((post)=> {\n\t\t\tconsole.log(post);\n\t\t\tconsole.log(post.id);\n\t\t\tsetAttributes( { \n\t\t\t\tid: post.id,\n\t\t\t\tlastUpdated: post.modified_gmt } );\n\t\t});\n\t}\n\n\tconst Toolbar = () => {\n\t\treturn(\n\t\t\t<Button isSecondary onClick={()=>{saveAsPost(postType)}}>\n\t\t\t\tSave As {postType}\n\t\t\t</Button>\n\t\t)\n\t}\n\n\tif ( 0 !== id ) {\n\t\treturn(\n\t\t\t<Fragment>\n\t\t\t\t{false !== setAttributes && (\n\t\t\t\t\t<InnerBlocks allowedBlocks={allowedBlocks}/>\n\t\t\t\t) }\n\t\t\t\t{false === setAttributes && (\n\t\t\t\t\t<InnerBlocks.Content/>\n\t\t\t\t)}\n\t\t\t\t<Toolbar/>\n\t\t\t</Fragment>\n\t\t );\n\t}\n\n\treturn <InitialState postType={postType} setAttributes={setAttributes} className={className}/>; \n}\n\nexport default PostAsInnerBlocks;","import {\n\tInspectorControls,\n\tBlockControls,\n\tBlockVerticalAlignmentToolbar,\n\t__experimentalBlockVariationPicker,\n\t__experimentalBlock as Block,\n} from '@wordpress/block-editor';\nimport { withDispatch, useDispatch, useSelect } from '@wordpress/data';\n\nimport { createBlock } from '@wordpress/blocks';\nimport { get, map } from 'lodash';\n\nimport Collapsible from 'components/collapsible';\nimport PostAsInnerBlocks from 'components/post-as-innerblocks';\nimport { Button } from 'semantic-ui-react';\nimport { __ } from '@wordpress/i18n';\n\n// const ALLOWED_BLOCKS = ['core/paragraph'];\n\nconst createBlocksFromInnerBlocksTemplate = ( innerBlocksTemplate ) => {\n\treturn map(\n\t\tinnerBlocksTemplate,\n\t\t( [ name, attributes, innerBlocks = [] ] ) =>\n\t\t\tcreateBlock(\n\t\t\t\tname,\n\t\t\t\tattributes,\n\t\t\t\tcreateBlocksFromInnerBlocksTemplate( innerBlocks ) \n\t\t\t)\n\t);\n};\n\nconst edit = ({ attributes, className, clientId, name, setAttributes }) => {\n\tconsole.log(attributes);\n\tconst { title, id } = attributes;\n   \n\t// We get some information when the block's internal state changes.\n    const {\n\t\tblockType,\n\t\thasInnerBlocks,\n\t} = useSelect(\n\t\t( select ) => {\n\t\t\tconst {\n\t\t\t\tgetBlockType,\n\t\t\t} = select( 'core/blocks' );\n\n\t\t\treturn {\n\t\t\t\tblockType: getBlockType( name ),\n\t\t\t\thasInnerBlocks:\n\t\t\t\t\tselect( 'core/block-editor' ).getBlocks( clientId ).length >\n\t\t\t\t\t0,\n\t\t\t};\n\t\t},\n\t\t[ clientId, name ]\n\t);\n\n\tconst { replaceInnerBlocks } = useDispatch( 'core/block-editor' );\n\n\t// if ( 0 !== id ) {\n\t// \treturn(\n\t// \t\t<div>\n\t// \t\t\t<p>We have an existing topic! You will not be able to edit the topic because its stored in the database.</p>\n\t// \t\t\t<p>We will have an edit button that will open in a new window the topic editor.</p>\n\t// \t\t\t<p>OR we could conceivably offer the option once a topic is loaded to just copy its contents directly and we would warn the user that they're copying these contents over and we could have a small button that once again lets the user take the contents of the topic and save it </p>\n\t// \t\t</div>\n\t// \t);\n\t// }\n\n\tif ( 0 !== id && '' !== title ) {\n\t\treturn(\n\t\t\t<Collapsible className={className} title={title} postType=\"topic\">\n\t\t\t\t<PostAsInnerBlocks id={id} postType=\"topic\" setAttributes={setAttributes} title={title}/>\n\t\t\t</Collapsible>\n\t\t)\n\t}\n\n\treturn <PostAsInnerBlocks id={id} postType=\"topic\" setAttributes={setAttributes} title={title}/>;\n}\n\nexport default edit;","import { InnerBlocks } from '@wordpress/block-editor';\nimport { Button } from 'semantic-ui-react';\n\nconst save = ({attributes, className}) => {\n    return <div className={className}><InnerBlocks.Content/><Button size=\"small\" color=\"teal\" disabled>Mark Topic Completed</Button></div>\n}\n\nexport default save;","\nimport { __ } from '@wordpress/i18n';\nimport edit from './edit';\nimport save from './save';\n\nconst settings = [\n    'easyteachlms/topic',\n    {\n        title: __('Topic'), \n        description: 'Block Desc.',\n        category: 'education',\n        keywords: [\n            __( 'Topic' ),\n        ],\n        supports: {\n            html: false, \n            align: true\n        },\n        attributes: {\n            id: {\n                type: 'integer',\n                default: 0,\n            },\n            lastUpdated: {\n                type: 'integer',\n                default: 0,\n            },\n            title: {\n                type: 'string',\n                default: '',\n            },\n        },\n        edit,\n        save,\n    }\n];\n\nexport default settings;","import { registerBlockType } from '@wordpress/blocks';\nimport settings from './settings';\nimport './topic.scss';\n\nregisterBlockType(...settings);","module.exports = wp.blockEditor;","module.exports = wp.data;","module.exports = lodash;","module.exports = ReactDOM;","module.exports = wp.blocks;"],"sourceRoot":""}