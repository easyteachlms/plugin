{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"lodash\"","webpack:///external \"wp.element\"","webpack:///external \"wp.i18n\"","webpack:///./blocks/_shared/components/collapsible/index.js","webpack:///./blocks/_shared/components/post-as-innerblocks/initial-state/index.js","webpack:///./blocks/_shared/components/post-as-innerblocks/index.js","webpack:///./blocks/topic/edit.js","webpack:///./blocks/topic/save.js","webpack:///./blocks/topic/settings.js","webpack:///./blocks/topic/index.js","webpack:///external \"wp.components\"","webpack:///external \"wp.blockEditor\"","webpack:///external \"ReactDOM\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.data\""],"names":["module","exports","React","lodash","wp","element","i18n","Collapsible","title","postType","className","children","useState","open","setState","caretDirection","classNames","collapsed","Header","as","icon","content","__","toUpperCase","onClick","e","SearchExisting","setAttributes","Dropdown","placeholder","fluid","search","selection","options","key","value","text","onChange","v","console","log","style","fontFamily","fontSize","CreateNew","withState","Form","onSubmit","id","Group","Input","name","Button","color","InitialState","Segment","textAlign","Divider","horizontal","capitalize","s","charAt","slice","PostAsInnerBlocks","lastUpdated","clientId","allowedBlocks","currentBlock","useSelect","select","getBlock","useDidMount","pType","api","models","fetch","then","post","modified_gmt","test","parse","rendered","checkPostForUpdates","saveAsPost","attributes","innerBlocks","getSaveContent","useBlockContent","save","info","Toolbar","display","flexWrap","isSecondary","Controls","type","panelTitle","more","initialOpen","label","disabled","Content","edit","getBlocks","length","hasInnerBlocks","hasBlocks","size","settings","description","category","keywords","supports","html","align","default","registerBlockType","components","blockEditor","ReactDOM","blocks","data"],"mappings":";;;;;;;;;;;;;;;;;6HAAAA,EAAOC,QAAUC,O,kBCAjBF,EAAOC,QAAUE,Q,iBCAjBH,EAAOC,QAAUG,GAAGC,S,oFCApBL,EAAOC,QAAUG,GAAGE,M,4IC2BLC,G,OArBK,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAAe,EACtCC,oBAAS,GAD6B,mBACzDC,EADyD,KACnDC,EADmD,KAO7DC,EAAiBF,EAAO,OAAS,QAErC,OACO,2BAAKH,UAAWM,IAAWN,EAAW,CAAEO,WAAYJ,KAChD,2BAAKH,UAAU,qBACX,oBAACQ,EAAA,EAAD,CAAQC,GAAG,KAAKC,KAAM,SAAWL,EAAgBM,QAASC,aAAIb,EAASc,cAAgB,IAAMf,GAAQgB,QAT5F,SAACC,GACxBX,GAAUD,OAUA,2BAAKH,UAAU,uBACVC,M,wFChBXe,EAAiB,SAAC,GAA+B,IAA9BjB,EAA6B,EAA7BA,SAA6B,EAAnBkB,cAiB/B,OACI,oBAAC,WAAD,KACI,oBAACT,EAAA,EAAD,CAAQC,GAAG,KAAKC,KAAK,SAASC,QAASC,aAAG,uBAAyBb,KACnE,oBAACmB,EAAA,EAAD,CACIC,YAAaP,aAAG,UAAYb,GAC5BqB,OAAK,EACLC,QAAM,EACNC,WAAS,EACTC,QAvBI,CACZ,CAAEC,IAAK,IAAKC,MAAO,IAAKC,KAAM,UAC9B,CAAEF,IAAK,IAAKC,MAAO,IAAKC,KAAM,UAC9B,CAAEF,IAAK,IAAKC,MAAO,IAAKC,KAAM,UAC9B,CAAEF,IAAK,IAAKC,MAAO,IAAKC,KAAM,UAC9B,CAAEF,IAAK,IAAKC,MAAO,IAAKC,KAAM,UAC9B,CAAEF,IAAK,IAAKC,MAAO,IAAKC,KAAM,UAC9B,CAAEF,IAAK,IAAKC,MAAO,IAAKC,KAAM,UAC9B,CAAEF,IAAK,IAAKC,MAAO,IAAKC,KAAM,UAC9B,CAAEF,IAAK,IAAKC,MAAO,IAAKC,KAAM,UAC9B,CAAEF,IAAK,IAAKC,MAAO,IAAKC,KAAM,UAC9B,CAAEF,IAAK,IAAKC,MAAO,IAAKC,KAAM,UAC9B,CAAEF,IAAK,IAAKC,MAAO,IAAKC,KAAM,WAYtBC,SAAU,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,IAC3BG,MAAO,CACHC,WAAW,mDACXC,SAAU,YAOxBC,EAAYC,YAAW,CACzBrC,MAAO,IADOqC,EAEb,YAAqD,IAAjDrC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,SAAUK,EAA+B,EAA/BA,SAAUa,EAAqB,EAArBA,cAWhC,OACI,oBAAC,WAAD,KACI,oBAACT,EAAA,EAAD,CAAQC,GAAG,KAAKC,KAAK,MAAMC,QAASC,aAAG,eAAiBb,KACxD,oBAACqC,EAAA,EAAD,CAAMC,SAVS,WAInBpB,EAAc,CAAEnB,QAAOwC,GAAI,MAOrB,oBAACF,EAAA,EAAKG,MAAN,KACE,oBAACH,EAAA,EAAKI,MAAN,CACErB,YAAY,QACZsB,KAAK,QACLhB,MAAO3B,EACP6B,SAnBO,SAACZ,EAAD,GAAwB,EAAlB0B,KAAmB,IAAbhB,EAAY,EAAZA,MAC7BrB,EAAU,CAAEN,MAAO2B,OAoBX,oBAACW,EAAA,EAAKM,OAAN,CAAaC,MAAM,OAAOjC,KAAK,MAAMC,QAASC,aAAG,UAAYb,WAiC9D6C,EArBM,SAAC,GAA0C,IAAzC7C,EAAwC,EAAxCA,SAAUkB,EAA8B,EAA9BA,cAAejB,EAAe,EAAfA,UAK5C,OACI,2BAAKA,UAAWA,GACZ,oBAAC6C,EAAA,EAAD,CAASC,UAAU,UACf,oBAAC,EAAD,CAAgB/C,SAAUA,IAC1B,oBAACgD,EAAA,EAAD,CAASC,YAAU,GACf,4BAAOjB,MAAO,CACVC,WAAW,mDACXC,SAAU,SAFd,OAKJ,oBAACC,EAAD,CAAWnC,SAAUA,EAAUkB,cAAeA,OCzDxDgC,EAAa,SAACC,GACnB,MAAiB,iBAANA,EAAuB,GAC3BA,EAAEC,OAAO,GAAGtC,cAAgBqC,EAAEE,MAAM,IAoI7BC,EA7HW,SAAC,GAA+G,IAA9Gf,EAA6G,EAA7GA,GAAIvC,EAAyG,EAAzGA,SAAUD,EAA+F,EAA/FA,MAAOwD,EAAwF,EAAxFA,YAAaC,EAA2E,EAA3EA,SAA2E,IAAjEtC,qBAAiE,aAA1CjB,iBAA0C,MAA9B,GAA8B,MAA1BwD,qBAA0B,MAAV,KAAU,EAElIC,EAAeC,qBAAW,SAAAC,GAC/B,OAAOA,EAAQ,qBAAsBC,SAAUL,KAC7C,IAsCHM,aAAY,YA9BgB,SAACvB,EAAIvC,EAAUuD,GAC1C,IAAMQ,EAAQb,EAAWlD,GACd,IAAIL,GAAGqE,IAAIC,OAAOF,GAAQ,CAAExB,OAElC2B,QAAQC,MAAK,SAAAC,GAIjB,GAHAtC,QAAQC,IAAIqC,GACZtC,QAAQC,IAAIwB,GACZzB,QAAQC,IAAIqC,EAAKC,cACZd,IAAgBa,EAAKC,aAAe,CACxCvC,QAAQC,IAAI,oBACZ,IAAMuC,EAAOC,YAAOH,EAAKxD,QAAQ4D,UACjC1C,QAAQC,IAAIuC,OAoBdG,CAAoBlC,EAAIvC,EAAUuD,MAInC,IAAMmB,EAAa,WAClB,IAAMX,EAAQb,EAAWlD,GACnBY,EA1CiB,WACmB8C,EAAlChB,KADsB,IAChBiC,EAA4BjB,EAA5BiB,WAAYC,EAAgBlB,EAAhBkB,YAC1B,OAAOC,yBAAe,6BAA8BF,EAAYC,GAwChDE,GAEL,IAAInF,GAAGqE,IAAIC,OAAOF,GAAQ,CAAEhE,QAAOa,YAEzCmE,OAAOZ,MAAK,SAACC,GACjBtC,QAAQkD,KAAK,cACblD,QAAQC,IAAIqC,GACZlD,EAAe,CACdqB,GAAI6B,EAAK7B,GACTgB,YAAaa,EAAKC,mBAMfY,EAAU,WACf,OACC,2BAAKjD,MAAO,CAACkD,QAAS,OAAQC,SAAU,SACvC,+BACC,oBAAC,SAAD,CAAQC,aAAW,EAACrE,QAAS,WAAK2D,MAAlC,WACU1E,IAGX,kCAMGqF,EAAW,WAChB,IAAMC,EAAOpC,EAAWlD,GAClBuF,EAAaD,EAAO,YAC1B,OACC,oBAAC,WAAD,KACC,oBAAC,oBAAD,KACC,oBAAC,QAAD,KACC,oBAAC,YAAD,CAAWvF,MAAOc,aAAG0E,GAAa5E,KAAO6E,IAAOC,aAAc,GAC7D,oBAAC,WAAD,KACC,oBAAC,cAAD,CACCC,MAAM,KACNhE,MAAQa,EACRoD,UAAQ,KAGV,oBAAC,WAAD,KACC,oBAAC,cAAD,CACCD,MAAM,YACNhE,MAAQ4D,EACRK,UAAQ,QAMb,oBAACV,EAAD,QAKH,OAAK,IAAM1C,EAET,oBAAC,WAAD,MACG,IAAUrB,GACX,oBAAC,WAAD,KACC,oBAAC,cAAD,CAAauC,cAAeA,IAC5B,oBAAC4B,EAAD,QAGA,IAAUnE,GAAiB,oBAAC,cAAY0E,QAAb,OAKzB,oBAAC,EAAD,CAAc5F,SAAUA,EAAUkB,cAAeA,EAAejB,UAAWA,KChIpE4F,EApBF,SAAC,GAAwD,IAAtDlB,EAAqD,EAArDA,WAAY1E,EAAyC,EAAzCA,UAAWuD,EAA8B,EAA9BA,SAAUtC,EAAoB,EAApBA,cACxCnB,EAA2B4E,EAA3B5E,MAAOwD,EAAoBoB,EAApBpB,YAAahB,EAAOoC,EAAPpC,GAExB+B,EAba,SAACd,GAOlB,OANA1B,QAAQC,IAAIyB,GAEeG,qBAC1B,SAAAC,GAAM,OAAIA,EAAQ,qBAAsBkC,UAAWtC,GAAWuC,OAAS,IACvE,CAAEvC,EAAUd,OAFLsD,eAUGC,CAAUzC,GAKrB,OAJA1B,QAAQC,IAAI4C,GACZ7C,QAAQC,IAAI,4BACZD,QAAQC,IAAIuC,GAEP,IAAM/B,GAAM,KAAOxC,EAEtB,oBAAC,EAAD,CAAaE,UAAWA,EAAWF,MAAOA,EAAOC,SAAS,SAEzD,oBAAC,EAAD,CAAmBuC,GAAIA,EAAIvC,SAAS,QAAQD,MAAOA,EAAOwD,YAAaA,EAAarC,cAAeA,EAAesC,SAAUA,KAKxH,oBAAC,EAAD,CAAmBjB,GAAIA,EAAIvC,SAAS,QAAQD,MAAOA,EAAOwD,YAAaA,EAAarC,cAAeA,EAAesC,SAAUA,K,SC5BrHuB,EAJF,SAAC,GAA4B,EAA3BJ,WAA4B,IAAhB1E,EAAe,EAAfA,UACvB,OAAO,2BAAKA,UAAWA,GAAW,oBAAC,cAAY2F,QAAb,MAAsB,oBAACjD,EAAA,EAAD,CAAQuD,KAAK,QAAQtD,MAAM,OAAO+C,UAAQ,GAA1C,0BCiC7CQ,EAhCE,CACb,qBACA,CACIpG,MAAOc,aAAG,SACVuF,YAAa,cACbC,SAAU,YACVC,SAAU,CACNzF,aAAI,UAER0F,SAAU,CACNC,MAAM,EACNC,OAAO,GAEX9B,WAAY,CACRpC,GAAI,CACA+C,KAAM,UACNoB,QAAS,GAEbnD,YAAa,CACT+B,KAAM,SACNoB,QAAS,GAEb3G,MAAO,CACHuF,KAAM,SACNoB,QAAS,KAGjBb,OACAd,S,OC7BR4B,oBAAiB,WAAjB,cAAqBR,K,iBCJrB5G,EAAOC,QAAUG,GAAGiH,Y,iBCApBrH,EAAOC,QAAUG,GAAGkH,a,iBCApBtH,EAAOC,QAAUsH,U,iBCAjBvH,EAAOC,QAAUG,GAAGoH,Q,iBCApBxH,EAAOC,QAAUG,GAAGqH,O","file":"topic-block/block-d591d97b.js","sourcesContent":["module.exports = React;","module.exports = lodash;","module.exports = wp.element;","module.exports = wp.i18n;","import { useState } from '@wordpress/element';\nimport classNames from 'classnames';\nimport { Header } from 'semantic-ui-react';\nimport { __ } from '@wordpress/i18n';\nimport './style.scss';\n\nconst Collapsible = ({ title, postType, className, children }) => {\n\tconst [ open, setState ] = useState(true);\n\t\n\tconst collapseHandler = (e) => {\n\t\tsetState(!open);\n\t}\n\t\n\tlet caretDirection = open ? 'down' : 'right';\n\n\treturn(\n        <div className={classNames(className, { collapsed: !open })}>\n            <div className=\"collapsible-title\">\n                <Header as='h4' icon={\"caret \" + caretDirection} content={__( postType.toUpperCase() + ' ' + title)} onClick={collapseHandler} />\n            </div>\n            <div className=\"collapsible-content\">\n                {children}\n            </div>\n        </div>\n    )\n}\n\nexport default Collapsible;","import { withState } from '@wordpress/compose';\nimport { Fragment } from '@wordpress/element';\nimport { Dropdown, Form, Divider, Segment, Header } from 'semantic-ui-react';\nimport { __ } from '@wordpress/i18n';\n\nconst SearchExisting = ({postType, setAttributes}) => {\n    // We need a promise that will set state and say loaded and also load the options from post values\n    const options = [\n        { key: 'a', value: 'a', text: 'Post A' },\n        { key: 'b', value: 'b', text: 'Post B' },\n        { key: 'c', value: 'c', text: 'Post C' },\n        { key: 'd', value: 'd', text: 'Post D' },\n        { key: 'e', value: 'e', text: 'Post E' },\n        { key: 'f', value: 'f', text: 'Post F' },\n        { key: 'g', value: 'g', text: 'Post G' },\n        { key: 'h', value: 'h', text: 'Post H' },\n        { key: 'i', value: 'i', text: 'Post I' },\n        { key: 'j', value: 'j', text: 'Post J' },\n        { key: 'l', value: 'l', text: 'Post L' },\n        { key: 'k', value: 'k', text: 'Post K' },\n    ];\n \n    return (\n        <Fragment>\n            <Header as='h3' icon='search' content={__('Search for existing ' + postType)} />\n            <Dropdown\n                placeholder={__('Select ' + postType)}\n                fluid\n                search\n                selection\n                options={options}\n                onChange={v => console.log(v)}\n                style={{\n                    fontFamily:\"Lato,'Helvetica Neue',Arial,Helvetica,sans-serif\",\n                    fontSize: '14px',\n                }}\n            />\n        </Fragment>\n    );\n}\n\nconst CreateNew = withState( {\n    title: '',\n} )( ( { title, postType, setState, setAttributes } ) => {\n    const handleChange = (e, { name, value }) => {\n        setState( { title: value } );\n    }\n    const handleCreation = () => {\n        // let post = new wp.api.models[capitalize(postType)]( { title } );\n        // post.save();\n        // setAttributes( { title, id: post.id } );\n        setAttributes({ title, id: 1 });\n        // And also using the wp.api go create a lesson with this title, return the ID and then set the attribute as the ID.\n    }\n    return (\n        <Fragment>\n            <Header as='h3' icon='add' content={__('Start a new ' + postType)} />\n            <Form onSubmit={handleCreation}>\n              <Form.Group>\n                <Form.Input\n                  placeholder='Title'\n                  name='title'\n                  value={title}\n                  onChange={handleChange}\n                />\n                <Form.Button color=\"teal\" icon=\"add\" content={__('Create ' + postType)} />\n              </Form.Group>\n            </Form>\n        </Fragment>\n    );\n} );\n\n// This component will contain a title and a post id. and state and inspector sidebar tools that let you define those manually as well (Should be another component)\n// It will have a title field and a post selector search box that will filter to the post types you pass in as a prop.\n\n// Should only be used when you have no inner block content or some other conditional like that\n\nconst InitialState = ({postType, setAttributes, className}) => {\n    // Select A Post\n    // What the course title is, and what course is associated with it (for courses that should be easy... or not??)\n    // What the lesson title is and what the lesson post its associated with...\n    // What the topic title is and what the topic post is associated with.\n    return(\n        <div className={className}>\n            <Segment textAlign='center'>\n                <SearchExisting postType={postType}/>\n                <Divider horizontal>\n                    <span  style={{\n                        fontFamily:\"Lato,'Helvetica Neue',Arial,Helvetica,sans-serif\",\n                        fontSize: '14px',\n                    }}>Or</span>\n                </Divider>\n                <CreateNew postType={postType} setAttributes={setAttributes}/>\n            </Segment>\n        </div>\n    );\n}\n\nexport default InitialState;","// HOC that maintains a connection to a external post\n\nimport { __ } from '@wordpress/i18n';\nimport { Fragment } from '@wordpress/element';\nimport { more } from '@wordpress/icons';\nimport { parse } from '@wordpress/block-serialization-default-parser';\nimport { \n\tButton, \n\tPanel, \n\tPanelBody, \n\tPanelRow,\n\tTextControl\n} from \"@wordpress/components\";\nimport { \n\tuseDispatch, \n\tuseSelect\n} from '@wordpress/data';\nimport {\n\tInspectorControls,\n\tInnerBlocks,\n\tBlockControls,\n} from '@wordpress/block-editor';\n\n\nimport { getSaveContent } from '@wordpress/blocks';\n\nimport {\n\tuseState,\n\tuseConstructor,\n\tuseDidMount,\n} from \"@daniakash/lifecycle-hooks\";\n\nimport InitialState from './initial-state';\n\n/** Helper Utils */\nconst capitalize = (s) => {\n\tif (typeof s !== 'string') return ''\n\treturn s.charAt(0).toUpperCase() + s.slice(1)\n}\n \n// if id === 0 then display the block initial state\n// if id === 1 then display normal but offer an option to save as post\n// if id is something else then actually check if the post exists and offer the updates and all that. \n\nconst PostAsInnerBlocks = ({id, postType, title, lastUpdated, clientId, setAttributes = false, className = '', allowedBlocks = null}) => {\n\t// We set the current block at init, ideally we would use dispatch or some even watcher here.\n\tconst currentBlock = useSelect( select => {\n\t\treturn select( 'core/block-editor' ).getBlock( clientId );\n\t}, [] );\n\t\n\t\n\tconst useBlockContent = () => {\n\t\tconst { name, attributes, innerBlocks } = currentBlock;\n\t\treturn getSaveContent('sethrubenstein/ghost-block', attributes, innerBlocks);\n\t}\n\n\tconst checkPostForUpdates = (id, postType, lastUpdated) => {\n\t\tconst pType = capitalize(postType);\n\t\tlet post = new wp.api.models[pType]( { id } );\n\t\t\n\t\tpost.fetch().then(post => {\n\t\t\tconsole.log(post);\n\t\t\tconsole.log(lastUpdated);\n\t\t\tconsole.log(post.modified_gmt);\n\t\t\tif ( lastUpdated !== post.modified_gmt ) {\n\t\t\t\tconsole.log(\"WE ARE DIVERGENT\");\n\t\t\t\tconst test = parse( post.content.rendered );\n\t\t\t\tconsole.log(test);\n\t\t\t}\n\t\t});\n\t}\n\n\tconst updateInnerBlocks = (newInnerBlocks) => {\n\t\t// When isSelected is true on the topic and isnt a brand new topic\n\t\t// 1. Check attributes.lastUpdated === topicPost.lastUpdated (made up variable we'll need to get that info). If so stop, otherwise proceed.\n\t\t// 2. Prompt user new content is available for this Topic would you like to load it or leave alone.\n\t\t// 3. If they select load it then go get the topicPosts postContent as a raw html string, store it as a temp variable.\n\t\t// 4. Use block editor parser https://developer.wordpress.org/block-editor/packages/packages-block-serialization-default-parser/ to transfor that html string into a list of innerBlock essentially\n\t\t// --- Here is where we need a solution. We need to transform a ghost block into something else\n\t\t// 5. Use block editor replaceInnerBLocks https://developer.wordpress.org/block-editor/data/data-core-block-editor/#replaceInnerBlocks to replace the inner blocks of this block with the innerblocks generated from step 4. \n\t\t// 6. Update attributes.lastUpdated with the topicPost.lastUpdated value so now we signal they are in sync.\n\t\t/// Possibly??? An option to instead of update, create new (fork) the topic/lesson\n\t\tconst newBlock = parse( newInnerBlocks );\n\t\treturn newBlock;\n\t}\n\n\tuseDidMount(() => {\n\t\tcheckPostForUpdates(id, postType, lastUpdated);\n\t});\n\n\t// OPTION 2: Save what you have as a brand new post, break existing links, put new links and more importantly take the current innerblocks parse them back out and send them to a posts content.\n\tconst saveAsPost = () => {\n\t\tconst pType = capitalize(postType);\n\t\tconst content = useBlockContent();\n\n\t\tlet post = new wp.api.models[pType]( { title, content } );\n\n\t\tpost.save().then((post)=> {\n\t\t\tconsole.info(\"POST SAVED\");\n\t\t\tconsole.log(post);\n\t\t\tsetAttributes( { \n\t\t\t\tid: post.id,\n\t\t\t\tlastUpdated: post.modified_gmt\n\t\t\t} );\n\t\t});\n\t}\n\n\t// @TODO we should check if has innerblocks and if not then dont displat the save button\n\tconst Toolbar = () => {\n\t\treturn(\n\t\t\t<div style={{display: 'flex', flexWrap: 'auto'}}>\n\t\t\t\t<div>\n\t\t\t\t\t<Button isSecondary onClick={()=>{saveAsPost(postType)}}>\n\t\t\t\t\t\tSave As {postType}\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\n\tconst Controls = () => {\n\t\tconst type = capitalize(postType);\n\t\tconst panelTitle = type + ' Settings';\n\t\treturn(\n\t\t\t<Fragment>\n\t\t\t\t<InspectorControls>\n\t\t\t\t\t<Panel>\n\t\t\t\t\t\t<PanelBody title={__(panelTitle)} icon={ more } initialOpen={ false }>\n\t\t\t\t\t\t\t<PanelRow>\n\t\t\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\t\t\tlabel='ID'\n\t\t\t\t\t\t\t\t\tvalue={ id }\n\t\t\t\t\t\t\t\t\tdisabled\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</PanelRow>\n\t\t\t\t\t\t\t<PanelRow>\n\t\t\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\t\t\tlabel='Post Type'\n\t\t\t\t\t\t\t\t\tvalue={ type }\n\t\t\t\t\t\t\t\t\tdisabled\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</PanelRow>\n\t\t\t\t\t\t</PanelBody>\n\t\t\t\t\t</Panel>\n\t\t\t\t</InspectorControls>\n\t\t\t\t<Toolbar/>\n\t\t\t</Fragment>\n\t\t)\n\t}\n\n\tif ( 0 !== id ) {\n\t\treturn(\n\t\t\t<Fragment>\n\t\t\t\t{ false !== setAttributes && (\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t<InnerBlocks allowedBlocks={allowedBlocks}/>\n\t\t\t\t\t\t<Controls/>\n\t\t\t\t\t</Fragment>\n\t\t\t\t) }\n\t\t\t\t{ false === setAttributes && <InnerBlocks.Content/> }\n\t\t\t</Fragment>\n\t\t );\n\t}\n\n\treturn <InitialState postType={postType} setAttributes={setAttributes} className={className}/>; \n}\n\nexport default PostAsInnerBlocks;","import { __ } from '@wordpress/i18n';\nimport { withDispatch, useDispatch, useSelect } from '@wordpress/data';\n\nimport Collapsible from 'components/collapsible';\nimport PostAsInnerBlocks from 'components/post-as-innerblocks';\n\nimport { Button } from 'semantic-ui-react';\n\nconst hasBlocks = (clientId) => {\n\tconsole.log(clientId);\n\t// We get some information when the block's internal state changes.\n\tconst { hasInnerBlocks } = useSelect(\n\t\tselect => select( 'core/block-editor' ).getBlocks( clientId ).length > 0,\n\t\t[ clientId, name ]\n\t);\n\treturn hasInnerBlocks;\n}\n\nconst edit = ({ attributes, className, clientId, setAttributes }) => {\n\tconst { title, lastUpdated, id } = attributes;\n\t\n\tlet test = hasBlocks(clientId);\n\tconsole.log(attributes);\n\tconsole.log(\"topic has inner blocks??\");\n\tconsole.log(test);\n\n\tif ( 0 !== id && '' !== title ) {\n\t\treturn(\n\t\t\t<Collapsible className={className} title={title} postType=\"topic\">\n\t\t\t\t{ /** Need to create a new block called topic content, it would use post as innerblocks and we would have a template on the topic block so when you insert it also inserts a topic content block internally. we could then easily use this to import and export content as we see fit. */}\n\t\t\t\t<PostAsInnerBlocks id={id} postType=\"topic\" title={title} lastUpdated={lastUpdated} setAttributes={setAttributes} clientId={clientId}/>\n\t\t\t</Collapsible>\n\t\t)\n\t}\n\n\treturn <PostAsInnerBlocks id={id} postType=\"topic\" title={title} lastUpdated={lastUpdated} setAttributes={setAttributes} clientId={clientId}/>;\n}\n\nexport default edit;","import { InnerBlocks } from '@wordpress/block-editor';\nimport { Button } from 'semantic-ui-react';\n\nconst save = ({attributes, className}) => {\n    return <div className={className}><InnerBlocks.Content/><Button size=\"small\" color=\"teal\" disabled>Mark Topic Completed</Button></div>\n}\n\nexport default save;","\nimport { __ } from '@wordpress/i18n';\nimport edit from './edit';\nimport save from './save';\n\nconst settings = [\n    'easyteachlms/topic',\n    {\n        title: __('Topic'), \n        description: 'Block Desc.',\n        category: 'education',\n        keywords: [\n            __( 'Topic' ),\n        ],\n        supports: {\n            html: false, \n            align: true\n        },\n        attributes: {\n            id: {\n                type: 'integer',\n                default: 0,\n            },\n            lastUpdated: {\n                type: 'string',\n                default: 0,\n            },\n            title: {\n                type: 'string',\n                default: '',\n            },\n        },\n        edit,\n        save,\n    }\n];\n\nexport default settings;","import { registerBlockType } from '@wordpress/blocks';\nimport settings from './settings';\nimport './topic.scss';\n\nregisterBlockType(...settings);","module.exports = wp.components;","module.exports = wp.blockEditor;","module.exports = ReactDOM;","module.exports = wp.blocks;","module.exports = wp.data;"],"sourceRoot":""}