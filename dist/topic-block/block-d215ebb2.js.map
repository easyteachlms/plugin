{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"lodash\"","webpack:///external \"wp.i18n\"","webpack:///external \"wp.components\"","webpack:///external \"wp.element\"","webpack:///./blocks/_shared/components/collapsible/index.js","webpack:///./blocks/_shared/utils/capitalize.js","webpack:///./blocks/_shared/utils/replaceContent.js","webpack:///./blocks/_shared/components/post-as-innerblocks/initial-state/index.js","webpack:///./blocks/_shared/components/post-as-innerblocks/controls/index.js","webpack:///./blocks/_shared/components/post-as-innerblocks/index.js","webpack:///./blocks/topic/edit.js","webpack:///./blocks/topic/save.js","webpack:///./blocks/topic/settings.js","webpack:///./blocks/topic/index.js","webpack:///external \"wp.blocks\"","webpack:///external \"ReactDOM\"","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.data\""],"names":["module","exports","React","lodash","wp","i18n","components","element","Collapsible","title","postType","className","children","useState","open","setState","caretDirection","classNames","collapsed","Header","as","icon","content","__","toUpperCase","onClick","e","capitalize","s","charAt","slice","replaceContent","clientId","postId","replaceInnerBlocks","undefined","type","post","api","models","id","Promise","resolve","fetch","then","parsedBlocks","rawHandler","HTML","content_raw","SearchExisting","withState","loading","posts","setAttributes","useDispatch","useDidMount","collections","data","status","d","map","push","key","value","text","rendered","Dropdown","placeholder","fluid","search","selection","disabled","options","onChange","find","o","lastUpdated","modified_gmt","style","fontFamily","fontSize","CreateNew","Form","onSubmit","Group","Input","name","Button","color","InitialState","size","Controls","currentBlock","useSelect","select","getBlock","updated","setFlag","UpdateContentButton","isSmall","isPrimary","SaveAsNewButton","saveAsPost","attributes","innerBlocks","getSaveContent","save","isSecondary","checkForUpdates","console","info","setInterval","panelTitle","display","alignItems","marginRight","initialOpen","label","isLink","PostAsInnerBlocks","allowedBlocks","Content","edit","settings","description","category","keywords","supports","html","align","default","registerBlockType","blocks","ReactDOM","blockEditor"],"mappings":";;;;;;;;;;;;;;;;;6HAAAA,EAAOC,QAAUC,O,kBCAjBF,EAAOC,QAAUE,Q,iBCAjBH,EAAOC,QAAUG,GAAGC,M,iBCApBL,EAAOC,QAAUG,GAAGE,Y,oFCApBN,EAAOC,QAAUG,GAAGG,S,oIC2BLC,G,OArBK,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAAe,EACtCC,oBAAS,GAD6B,mBACzDC,EADyD,KACnDC,EADmD,KAO7DC,EAAiBF,EAAO,OAAS,QAErC,OACO,2BAAKH,UAAWM,IAAWN,EAAW,CAAEO,WAAYJ,KAChD,2BAAKH,UAAU,qBACX,oBAACQ,EAAA,EAAD,CAAQC,GAAG,KAAKC,KAAM,SAAWL,EAAgBM,QAASC,aAAIb,EAASc,cAAgB,MAAQf,GAAQgB,QAT9F,SAACC,GACxBX,GAAUD,OAUA,2BAAKH,UAAU,uBACVC,M,2DChBFe,EALI,SAAAC,GAClB,MAAiB,iBAANA,EAAuB,GAC3BA,EAAEC,OAAO,GAAGL,cAAgBI,EAAEE,MAAM,ICwB7BC,EAtBQ,SAACC,EAAUC,EAAQvB,EAAUwB,GAChD,GAAK,MAASA,EACV,OAAO,EAEX,QAAKC,IAAcH,QAAYG,IAAcF,QAAUE,IAAczB,EACjE,OAAO,EAIX,IAAM0B,EAAOT,EAAWjB,GAClB2B,EAAO,IAAIjC,GAAGkC,IAAIC,OAAOH,GAAO,CAAEI,GAAIP,IAE5C,OAAO,IAAIQ,SAAQ,SAAAC,GACfL,EAAKM,QAAQC,MAAK,SAAAP,GACd,IAAMQ,EAAeC,qBAAW,CAACC,KAAMV,EAAKW,cAC5Cd,EAAoBF,EAAUa,GAAeD,MAAM,WAC/CF,EAAQL,aCXlBY,EAAiBC,YAAU,CAC7BC,SAAS,EACTC,MAAO,IAFYF,EAGpB,YAAsE,IAAnExC,EAAkE,EAAlEA,SAAUyC,EAAwD,EAAxDA,QAASC,EAA+C,EAA/CA,MAAOrC,EAAwC,EAAxCA,SAAUsC,EAA8B,EAA9BA,cAAerB,EAAe,EAAfA,SAC/CI,EAAOT,EAAWjB,GAChBwB,EAAuBoB,sBAAY,qBAAnCpB,mBAqCR,OAJAqB,aAAY,YAjBgB,IAAInD,GAAGkC,IAAIkB,YAAYpB,IAE1CO,MAAM,CAAEc,KAAM,CAAEC,OAAQ,CAAC,UAAW,YACpCd,MAAK,SAACQ,GAEH,IAAMO,EAAI,GACVP,EAAMQ,KAAI,SAACvB,GACPsB,EAAEE,KAAK,CACHC,IAAKzB,EAAKG,GACVuB,MAAO1B,EAAKG,GACZwB,KAAM3B,EAAK5B,MAAMwD,cAGzBlD,EAAS,CAAEqC,MAAOO,EAAGR,SAAS,UAStC,oBAAC,WAAD,KACI,oBAAChC,EAAA,EAAD,CACIC,GAAG,KACHC,KAAK,SACLC,QAASC,aAAG,uBAAD,OAAwBb,MAEvC,oBAACwD,EAAA,EAAD,CACIC,YACIhB,EAAU5B,aAAG,WAAD,OAAYb,EAAZ,QAA6Ba,aAAG,GAAD,OAAIa,EAAJ,OAE/CgC,OAAK,EACLC,QAAM,EACNC,WAAS,EACTnB,QAASA,EACToB,SAAUpB,EACVqB,QAASpB,EACTqB,SApDS,SAAC/C,EAAGiC,GAAO,IAAD,EACHA,EAAEa,QAAQE,MAAK,SAACC,GAAD,OAAOA,EAAEZ,QAAUJ,EAAEI,SAApDA,EADmB,EACnBA,MAAOC,EADY,EACZA,KAEfjC,EAAeC,EAAU+B,EAAOrD,EAAUwB,GAAoBU,MAC1D,SAACP,GACGgB,EAAc,CACV5C,MAAOuD,EACPxB,GAAIuB,EACJa,YAAavC,EAAKwC,mBA6CtBC,MAAO,CACHC,WACI,mDACJC,SAAU,cAOxBC,EAAY/B,YAAU,CACxBzC,MAAO,IADOyC,EAEf,YAAmD,IAAhDzC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,SAAUK,EAA8B,EAA9BA,SAAUsC,EAAoB,EAApBA,cAO7B,OACI,oBAAC,WAAD,KACI,oBAAClC,EAAA,EAAD,CACIC,GAAG,KACHC,KAAK,MACLC,QAASC,aAAG,eAAD,OAAgBb,MAE/B,oBAACwE,EAAA,EAAD,CAAMC,SAVS,WACnB9B,EAAc,CAAE5C,QAAO+B,GAAI,MAUnB,oBAAC0C,EAAA,EAAKE,MAAN,KACI,oBAACF,EAAA,EAAKG,MAAN,CACIlB,YAAY,QACZmB,KAAK,QACLvB,MAAOtD,EACPgE,SAnBC,SAAC/C,EAAD,GAAwB,EAAlB4D,KAAmB,IAAbvB,EAAY,EAAZA,MAC7BhD,EAAS,CAAEN,MAAOsD,OAoBN,oBAACmB,EAAA,EAAKK,OAAN,CACIC,MAAM,OACNnE,KAAK,MACLC,QAASC,aAAG,UAAD,OAAWb,YAwC/B+E,EA3BM,SAAC,GAAsD,IAApD/E,EAAmD,EAAnDA,SAAU2C,EAAyC,EAAzCA,cAAe1C,EAA0B,EAA1BA,UAAWqB,EAAe,EAAfA,SAKxD,OACI,2BAAKrB,UAAWA,GACZ,oBAAC,OAAD,CAAM+E,KAAK,SACP,oBAAC,aAAD,KACI,oBAACzC,EAAD,CACIvC,SAAUA,EACVsB,SAAUA,EACVqB,cAAeA,KAIvB,oBAAC,WAAD,KACI,oBAAC4B,EAAD,CACIvE,SAAUA,EACV2C,cAAeA,QCOxBsC,EAjIE,SAAC,GAOX,IANHnD,EAME,EANFA,GACA9B,EAKE,EALFA,SACAD,EAIE,EAJFA,MACAmE,EAGE,EAHFA,YACA5C,EAEE,EAFFA,SAEE,IADFqB,qBACE,SACIuC,EAAeC,qBAAW,SAAAC,GAC5B,OAAOA,EAAQ,qBAAsBC,SAAU/D,KAChD,IAHD,EAK2BnB,oBAAS,GALpC,mBAKMmF,EALN,KAKeC,EALf,KAMI7D,EAAOT,EAAWjB,GAChBwB,EAAuBoB,sBAAY,qBAAnCpB,mBAEFgE,EAAsB,SAAC,GAAuB,IAAD,IAArBC,eAAqB,SAO/C,OAAO,oBAAC,SAAD,CAAQA,QAASA,EAASC,WAAS,EAAC3E,QAAS,WALhDM,EAAeC,EAAUQ,EAAI9B,EAAUwB,GAAoBU,MAAK,SAAAP,GAC5DgB,EAAc,CAACuB,YAAavC,EAAKwC,eACjCoB,GAAQ,QAGoD1E,aAAG,oBAGrE8E,EAAkB,SAAC,GAAuB,IAAD,IAArBF,eAAqB,SAMrCG,EAAa,WACf,IALQC,EAAYC,EAKdlF,GALEiF,EAA4BX,EAA5BW,WAAYC,EAAgBZ,EAAhBY,YACbC,yBAAe,6BAA8BF,EAAYC,IAMrD,IAAIpG,GAAGkC,IAAIC,OAAOH,GAAO,CAAE3B,QAAOa,YAExCoF,OAAO9D,MAAK,SAACP,GACdgB,EAAe,CACXb,GAAIH,EAAKG,GACToC,YAAavC,EAAKwC,mBAIlC,OAAO,oBAAC,SAAD,CAAQsB,QAASA,EAASQ,aAAW,EAAClF,QAAS,kBAAI6E,MAAe/E,aAAG,eAAiBa,KAGvFwE,EAAkB,YACpBC,QAAQC,KAAK,2BACR,IAAMtE,IAGA,IAAIpC,GAAGkC,IAAIC,OAAOH,GAAO,CAAEI,OAEvCG,QAAQC,MAAK,SAAAP,GACZuC,IAAgBvC,EAAKwC,cACzBoB,GAAQ,OAMR1C,aAAY,WACRqD,IACNG,YAAaH,EAAiB,QAG5B,IAAMI,EAAa5E,EAAO,YAE1B,OACI,oBAAC,WAAD,MACM,IAAS4D,GACP,2BAAKlB,MAAO,CAACE,SAAU,OAAQD,WAAY,aAAcS,MAAO,OAAQyB,QAAS,OAAQC,WAAY,WACjG,oBAAC,WAAD,CAAU7F,KAAK,SAASyD,MAAO,CAACqC,YAAa,UADjD,QAEU/E,EAFV,yBAKJ,2BAAK0C,MAAO,CAACmC,QAAS,UAChB,IAASjB,GACP,+BACI,oBAACE,EAAD,CAAqBC,SAAS,KAGtC,+BACI,oBAACE,EAAD,CAAiBF,SAAS,MAGlC,oBAAC,oBAAD,KACI,oBAAC,QAAD,KACI,oBAAC,YAAD,CAAW1F,MAAOc,aAAGyF,GAAcI,aAAc,GACjD,oBAAC,WAAD,KACQ,oBAAC,cAAD,CACIC,MAAM,QACNtD,MAAQtD,EACRgE,SAAU,SAAAhE,GAAK,OAAI4C,EAAc,CAAC5C,cAG1C,oBAAC,WAAD,KACI,oBAAC,cAAD,CACI4G,MAAM,KACNtD,MAAQvB,EACR+B,UAAQ,KAGhB,oBAAC,WAAD,KACI,oBAAC,cAAD,CACI8C,MAAM,YACNtD,MAAQ3B,EACRmC,UAAQ,MAGd,IAASyB,GACP,oBAAC,WAAD,KACI,oBAACE,EAAD,OAGR,oBAAC,WAAD,KACI,oBAACG,EAAD,OAEJ,oBAAC,WAAD,KACI,oBAAC,SAAD,CAAQiB,QAAM,GAAE/F,aAAG,6BClFhCgG,EAzCW,SAAC,GASpB,IARH/E,EAQE,EARFA,GACA9B,EAOE,EAPFA,SACAD,EAME,EANFA,MACAmE,EAKE,EALFA,YACA5C,EAIE,EAJFA,SAIE,IAHFqB,qBAGE,aAFF1C,iBAEE,MAFU,GAEV,MADF6G,qBACE,MADc,KACd,EACF,OAAI,IAAMhF,EAEF,oBAAC,WAAD,MACK,IAAUa,GACP,oBAAC,WAAD,KACI,oBAAC,cAAD,CAAamE,cAAeA,IAC5B,oBAAC,EAAD,CACIhF,GAAIA,EACJ9B,SAAUA,EACVD,MAAOA,EACPmE,YAAaA,EACb5C,SAAUA,EACVqB,cAAeA,MAI1B,IAAUA,GAAiB,oBAAC,cAAYoE,QAAb,OAMpC,oBAAC,EAAD,CACI/G,SAAUA,EACV2C,cAAeA,EACf1C,UAAWA,EACXqB,SAAUA,KC/BP0F,EAfF,SAAC,GAAwD,IAAtDnB,EAAqD,EAArDA,WAAY5F,EAAyC,EAAzCA,UAAWqB,EAA8B,EAA9BA,SAAUqB,EAAoB,EAApBA,cACxC5C,EAA2B8F,EAA3B9F,MAAOmE,EAAoB2B,EAApB3B,YAAapC,EAAO+D,EAAP/D,GAE5B,OAAK,IAAMA,GAAM,KAAO/B,EAEtB,oBAAC,EAAD,CAAaE,UAAWA,EAAWF,MAAOA,EAAOC,SAAS,SAEzD,oBAAC,EAAD,CAAmB8B,GAAIA,EAAI9B,SAAS,QAAQD,MAAOA,EAAOmE,YAAaA,EAAavB,cAAeA,EAAerB,SAAUA,KAKxH,oBAAC,EAAD,CAAmBQ,GAAIA,EAAI9B,SAAS,QAAQD,MAAOA,EAAOmE,YAAaA,EAAavB,cAAeA,EAAerB,SAAUA,KCHrH0E,EATF,SAAC,GAAyC,IAAvCH,EAAsC,EAAtCA,WAAY5F,EAA0B,EAA1BA,UAAWqB,EAAe,EAAfA,SAC9BvB,EAA2B8F,EAA3B9F,MAAOmE,EAAoB2B,EAApB3B,YAAapC,EAAO+D,EAAP/D,GACzB,OACI,2BAAK7B,UAAWA,GACZ,oBAAC,EAAD,CAAmB6B,GAAIA,EAAI9B,SAAS,QAAQD,MAAOA,EAAOmE,YAAaA,EAAavB,eAAe,EAAOrB,SAAUA,MC8BjH2F,EAhCE,CACb,qBACA,CACIlH,MAAOc,aAAG,SACVqG,YAAa,cACbC,SAAU,YACVC,SAAU,CACNvG,aAAI,UAERwG,SAAU,CACNC,MAAM,EACNC,OAAO,GAEX1B,WAAY,CACR/D,GAAI,CACAJ,KAAM,UACN8F,QAAS,GAEbtD,YAAa,CACTxC,KAAM,SACN8F,QAAS,GAEbzH,MAAO,CACH2B,KAAM,SACN8F,QAAS,KAGjBR,OACAhB,S,OC7BRyB,oBAAiB,WAAjB,cAAqBR,K,iBCJrB3H,EAAOC,QAAUG,GAAGgI,Q,iBCApBpI,EAAOC,QAAUoI,U,iBCAjBrI,EAAOC,QAAUG,GAAGkI,a,iBCApBtI,EAAOC,QAAUG,GAAGqD,O","file":"topic-block/block-d215ebb2.js","sourcesContent":["module.exports = React;","module.exports = lodash;","module.exports = wp.i18n;","module.exports = wp.components;","module.exports = wp.element;","import { useState } from '@wordpress/element';\nimport classNames from 'classnames';\nimport { Header } from 'semantic-ui-react';\nimport { __ } from '@wordpress/i18n';\nimport './style.scss';\n\nconst Collapsible = ({ title, postType, className, children }) => {\n\tconst [ open, setState ] = useState(true);\n\t\n\tconst collapseHandler = (e) => {\n\t\tsetState(!open);\n\t}\n\t\n\tlet caretDirection = open ? 'down' : 'right';\n\n\treturn(\n        <div className={classNames(className, { collapsed: !open })}>\n            <div className=\"collapsible-title\">\n                <Header as='h4' icon={\"caret \" + caretDirection} content={__( postType.toUpperCase() + ':  ' + title)} onClick={collapseHandler} />\n            </div>\n            <div className=\"collapsible-content\">\n                {children}\n            </div>\n        </div>\n    )\n}\n\nexport default Collapsible;","const capitalize = s => {\n\tif (typeof s !== 'string') return ''\n\treturn s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nexport default capitalize;","import { __ } from '@wordpress/i18n';\nimport { rawHandler } from '@wordpress/blocks';\nimport capitalize from './capitalize';\n\nconst replaceContent = (clientId, postId, postType, replaceInnerBlocks) => {\n    if ( null === replaceInnerBlocks || undefined === replaceInnerBlocks ) {\n        return false;\n    }\n    if ( undefined === clientId || undefined === postId || undefined === postType ) {\n        return false;\n    }\n\n    \n    const type = capitalize(postType);\n    const post = new wp.api.models[type]( { id: postId } );\n\n    return new Promise(resolve => {\n        post.fetch().then(post => {\t\t\n            const parsedBlocks = rawHandler({HTML: post.content_raw});\n            replaceInnerBlocks( clientId, parsedBlocks ).then( () => {\n                resolve(post);\n            } );\n        });\n    });\n}\n\nexport default replaceContent;","import { __ } from '@wordpress/i18n';\nimport { withState } from '@wordpress/compose';\nimport { Fragment } from '@wordpress/element';\nimport { Dropdown, Form, Header } from 'semantic-ui-react';\nimport { Card, CardBody, CardDivider, CardHeader } from '@wordpress/components';\nimport { useDispatch } from '@wordpress/data';\nimport { useDidMount } from '@daniakash/lifecycle-hooks';\nimport { capitalize, replaceContent } from '@easyteachlms/utils';\n\nconst SearchExisting = withState({\n    loading: true,\n    posts: [],\n})(({ postType, loading, posts, setState, setAttributes, clientId }) => {\n    const type = capitalize(postType);\n    const { replaceInnerBlocks } = useDispatch('core/block-editor');\n\n    const handleChange = (e, d) => {\n        const { value, text } = d.options.find((o) => o.value === d.value);\n\n        replaceContent(clientId, value, postType, replaceInnerBlocks).then(\n            (post) => {\n                setAttributes({\n                    title: text,\n                    id: value,\n                    lastUpdated: post.modified_gmt,\n                });\n            },);\n    };\n\n    const loadPosts = () => {\n        const postsCollection = new wp.api.collections[type]();\n        postsCollection\n            .fetch({ data: { status: ['publish', 'draft'] } })\n            .then((posts) => {\n                // \"d\" for Data\n                const d = [];\n                posts.map((post) => {\n                    d.push({\n                        key: post.id,\n                        value: post.id,\n                        text: post.title.rendered,\n                    });\n                });\n                setState({ posts: d, loading: false });\n            });\n    };\n\n    useDidMount(() => {\n        loadPosts();\n    });\n\n    return (\n        <Fragment>\n            <Header\n                as=\"h3\"\n                icon=\"search\"\n                content={__(`Search for existing ${postType}`)}\n            />\n            <Dropdown\n                placeholder={\n                    loading ? __(`Loading ${postType}...`) : __(`${type}'s`)\n                }\n                fluid\n                search\n                selection\n                loading={loading}\n                disabled={loading}\n                options={posts}\n                onChange={handleChange}\n                style={{\n                    fontFamily:\n                        \"Lato,'Helvetica Neue',Arial,Helvetica,sans-serif\",\n                    fontSize: '14px',\n                }}\n            />\n        </Fragment>\n    );\n});\n\nconst CreateNew = withState({\n    title: '',\n})(({ title, postType, setState, setAttributes }) => {\n    const handleChange = (e, { name, value }) => {\n        setState({ title: value });\n    };\n    const handleCreation = () => {\n        setAttributes({ title, id: 1 });\n    };\n    return (\n        <Fragment>\n            <Header\n                as=\"h3\"\n                icon=\"add\"\n                content={__(`Start a new ${postType}`)}\n            />\n            <Form onSubmit={handleCreation}>\n                <Form.Group>\n                    <Form.Input\n                        placeholder=\"Title\"\n                        name=\"title\"\n                        value={title}\n                        onChange={handleChange}\n                    />\n                    <Form.Button\n                        color=\"blue\"\n                        icon=\"add\"\n                        content={__(`Create ${postType}`)}\n                    />\n                </Form.Group>\n            </Form>\n        </Fragment>\n    );\n});\n\n// This component will contain a title and a post id. and state and inspector sidebar tools that let you define those manually as well (Should be another component)\n// It will have a title field and a post selector search box that will filter to the post types you pass in as a prop.\n\n// Should only be used when you have no inner block content or some other conditional like that\n\nconst InitialState = ({ postType, setAttributes, className, clientId }) => {\n    // Select A Post\n    // What the course title is, and what course is associated with it (for courses that should be easy... or not??)\n    // What the lesson title is and what the lesson post its associated with...\n    // What the topic title is and what the topic post is associated with.\n    return (\n        <div className={className}>\n            <Card size=\"large\">\n                <CardHeader>\n                    <SearchExisting\n                        postType={postType}\n                        clientId={clientId}\n                        setAttributes={setAttributes}\n                    />\n                </CardHeader>\n                {/* <CardDivider /> */}\n                <CardBody>\n                    <CreateNew\n                        postType={postType}\n                        setAttributes={setAttributes}\n                    />\n                </CardBody>\n            </Card>\n        </div>\n    );\n};\n\nexport default InitialState;\n","import { __ } from '@wordpress/i18n';\nimport { useDidMount } from \"@daniakash/lifecycle-hooks\";\nimport { Fragment, useState } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { getSaveContent } from '@wordpress/blocks';\nimport { InspectorControls } from '@wordpress/block-editor';\nimport { \n\tButton, \n\tPanel, \n\tPanelBody, \n\tPanelRow,\n\tTextControl,\n\tDashicon\n} from \"@wordpress/components\";\nimport { replaceContent, capitalize } from '@easyteachlms/utils';\n\nconst Controls = ({\n    id,\n    postType,\n    title,\n    lastUpdated,\n    clientId,\n    setAttributes = false\n}) => {\n    const currentBlock = useSelect( select => {\n        return select( 'core/block-editor' ).getBlock( clientId );\n    }, [] );\n    \n    const [ updated, setFlag ] = useState(false);\n    const type = capitalize(postType);\n    const { replaceInnerBlocks } = useDispatch('core/block-editor');\n\n    const UpdateContentButton = ({isSmall = false}) => {\n        const onClick = () =>  {\n            replaceContent(clientId, id, postType, replaceInnerBlocks).then(post => {\n                setAttributes({lastUpdated: post.modified_gmt});\n                setFlag(false);\n            });\n        }\n        return <Button isSmall={isSmall} isPrimary onClick={()=>onClick()}>{__('Update Content')}</Button>\n    }\n\n    const SaveAsNewButton = ({isSmall = false}) => {\n        const getBlockContent = () => {\n            const { attributes, innerBlocks } = currentBlock;\n            return getSaveContent('sethrubenstein/ghost-block', attributes, innerBlocks);\n        }\n        \n        const saveAsPost = () => {\n            const content = getBlockContent();\n        \n            let post = new wp.api.models[type]( { title, content } );\n        \n            post.save().then((post)=> {\n                setAttributes( { \n                    id: post.id,\n                    lastUpdated: post.modified_gmt\n                } );\n            });\n        }\n    return <Button isSmall={isSmall} isSecondary onClick={()=>saveAsPost()}>{__('Save As New ' + type)}</Button>\n    }\n\n    const checkForUpdates = () => {\n        console.info('Watching for updates...');\n        if ( 1 === id ) {\n            return;\n        }\n        let post = new wp.api.models[type]( { id } );\n\t\n\t\tpost.fetch().then(post => {\n\t\t\tif ( lastUpdated !== post.modified_gmt ) {\n\t\t\t\tsetFlag(true);\n\t\t\t}\n\t\t});\n    }\n\n    /** Check for post updates */\n    useDidMount(() => {\n        checkForUpdates();\n\t\tsetInterval( checkForUpdates, 30000 );\n\t});\n\n    const panelTitle = type + ' Settings';\n\n    return(\n        <Fragment>\n            { true === updated && (\n                <div style={{fontSize: '13px', fontFamily: 'sans-serif', color: 'gray', display: 'flex', alignItems: 'center'}}>\n                    <Dashicon icon=\"update\" style={{marginRight: '11px'}}/>\n                    This {type} has updated content. \n                </div>\n            )}\n            <div style={{display: 'flex'}}>\n                { true === updated && (\n                    <div>\n                        <UpdateContentButton isSmall={true}/>\n                    </div>\n                )}\n                <div>\n                    <SaveAsNewButton isSmall={true}/>\n                </div>\n            </div>\n            <InspectorControls>\n                <Panel>\n                    <PanelBody title={__(panelTitle)}  initialOpen={ true }>\n                    <PanelRow>\n                            <TextControl\n                                label='Title'\n                                value={ title }\n                                onChange={title => setAttributes({title})}\n                            />\n                        </PanelRow>\n                        <PanelRow>\n                            <TextControl\n                                label='ID'\n                                value={ id }\n                                disabled\n                            />\n                        </PanelRow>\n                        <PanelRow>\n                            <TextControl\n                                label='Post Type'\n                                value={ type }\n                                disabled\n                            />\n                        </PanelRow>\n                        { true === updated && (\n                            <PanelRow>\n                                <UpdateContentButton/>\n                            </PanelRow>\n                        ) }\n                        <PanelRow>\n                            <SaveAsNewButton/>\n                        </PanelRow>\n                        <PanelRow>\n                            <Button isLink>{__('Edit In New Window')}</Button>\n                        </PanelRow>\n                    </PanelBody>\n                </Panel>\n            </InspectorControls>\n        </Fragment>\n    )\n}\n\nexport default Controls;","// HOC that maintains a connection to a external post\n\nimport { __ } from '@wordpress/i18n';\nimport { Fragment } from '@wordpress/element';\nimport { InnerBlocks } from '@wordpress/block-editor';\n\nimport InitialState from './initial-state';\nimport Controls from './controls';\n\n// if id === 0 then display the block initial state\n// if id === 1 then display normal but offer an option to save as post\n// if id is something else then actually check if the post exists and offer the updates and all that.\n\nconst PostAsInnerBlocks = ({\n    id,\n    postType,\n    title,\n    lastUpdated,\n    clientId,\n    setAttributes = false,\n    className = '',\n    allowedBlocks = null,\n}) => {\n    if (0 !== id) {\n        return (\n            <Fragment>\n                {false !== setAttributes && (\n                    <Fragment>\n                        <InnerBlocks allowedBlocks={allowedBlocks} />\n                        <Controls\n                            id={id}\n                            postType={postType}\n                            title={title}\n                            lastUpdated={lastUpdated}\n                            clientId={clientId}\n                            setAttributes={setAttributes}\n                        />\n                    </Fragment>\n                )}\n                {false === setAttributes && <InnerBlocks.Content />}\n            </Fragment>\n        );\n    }\n\n    return (\n        <InitialState\n            postType={postType}\n            setAttributes={setAttributes}\n            className={className}\n            clientId={clientId}\n        />\n    );\n};\n\nexport default PostAsInnerBlocks;\n","import { __ } from '@wordpress/i18n';\nimport { Collapsible, PostAsInnerBlocks } from '@easyteachlms/components';\n\nconst edit = ({ attributes, className, clientId, setAttributes }) => {\n\tconst { title, lastUpdated, id } = attributes;\n\n\tif ( 0 !== id && '' !== title ) {\n\t\treturn(\n\t\t\t<Collapsible className={className} title={title} postType=\"topic\">\n\t\t\t\t{ /** Need to create a new block called topic content, it would use post as innerblocks and we would have a template on the topic block so when you insert it also inserts a topic content block internally. we could then easily use this to import and export content as we see fit. */}\n\t\t\t\t<PostAsInnerBlocks id={id} postType=\"topic\" title={title} lastUpdated={lastUpdated} setAttributes={setAttributes} clientId={clientId}/>\n\t\t\t</Collapsible>\n\t\t)\n\t}\n\n\treturn <PostAsInnerBlocks id={id} postType=\"topic\" title={title} lastUpdated={lastUpdated} setAttributes={setAttributes} clientId={clientId}/>;\n}\n\nexport default edit;","import { __ } from '@wordpress/i18n';\nimport { PostAsInnerBlocks } from '@easyteachlms/components';\n\nconst save = ({ attributes, className, clientId }) => {\n\tconst { title, lastUpdated, id } = attributes;\n    return(\n        <div className={className}>\n            <PostAsInnerBlocks id={id} postType=\"topic\" title={title} lastUpdated={lastUpdated} setAttributes={false} clientId={clientId}/>\n        </div>\n    );\n}\n\nexport default save;","\nimport { __ } from '@wordpress/i18n';\nimport edit from './edit';\nimport save from './save';\n\nconst settings = [\n    'easyteachlms/topic',\n    {\n        title: __('Topic'), \n        description: 'Block Desc.',\n        category: 'education',\n        keywords: [\n            __( 'Topic' ),\n        ],\n        supports: {\n            html: false, \n            align: false,\n        },\n        attributes: {\n            id: {\n                type: 'integer',\n                default: 0,\n            },\n            lastUpdated: {\n                type: 'string',\n                default: 0,\n            },\n            title: {\n                type: 'string',\n                default: '',\n            },\n        },\n        edit,\n        save,\n    }\n];\n\nexport default settings;","import { registerBlockType } from '@wordpress/blocks';\nimport settings from './settings';\nimport './topic.scss';\n\nregisterBlockType(...settings);\n","module.exports = wp.blocks;","module.exports = ReactDOM;","module.exports = wp.blockEditor;","module.exports = wp.data;"],"sourceRoot":""}